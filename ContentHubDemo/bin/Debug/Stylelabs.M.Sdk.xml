<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stylelabs.M.Sdk</name>
    </assembly>
    <members>
        <member name="T:Stylelabs.M.Sdk.Clients.IAssetsClient">
            <summary>
            Contains functionality for asset operations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Clients.IAssetsClient.FinalLifeCycleManager">
            <summary>
            Gets the final life cycle manager.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IAssetsClient.CreatePublicLinkAsync(System.Int64,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Creates a public link for the specified asset.
            </summary>
            <param name="assetId">The asset id.</param>
            <param name="rendition">The name of the rendition.</param>
            <param name="expirationDate">The expiration date of the public link.</param>
            <param name="relativeUrl">The relative URL of the public link.</param>
            <returns>The id of the public link entity.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.ICommandsClient">
            <summary>
            Contains functionality to execute commands in Sitecore Content Hub.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ICommandsClient.ExecuteCommandAsync(System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Executes an Sitecore Content Hub command.
            </summary>
            <param name="namespace">The name of the folder containing the command.</param>
            <param name="command">The name of the command.</param>
            <param name="arguments">The arguments of the command. If the command has no arguments, <c>null</c> can be specified.</param>
            <returns>The result of the command. If the command has no result, <c>null</c> is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Arguments <paramref>
                    <name>folder</name>
                </paramref>
                and <paramref name="command"/> cannot be <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Arguments <paramref>
                    <name>folder</name>
                </paramref>
                and <paramref name="command"/> cannot be empty strings.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">The specified command cannot be found.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.ICultureClient">
            <summary>
            Allows fetching culture information from M.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ICultureClient.GetDefaultCultureAsync">
            <summary>
            Gets the default culture in M.
            </summary>
            <returns>The default culture.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ICultureClient.GetDefaultCultureCachedAsync">
            <summary>
            Gets the cached default culture in M.
            </summary>
            <returns>The default culture.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ICultureClient.GetAllCulturesAsync">
            <summary>
            Gets all installed cultures in M.
            </summary>
            <returns>All installed cultures.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ICultureClient.GetAllCulturesCachedAsync">
            <summary>
            Gets all cached installed cultures in M.
            </summary>
            <returns>All cached installed cultures.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IDataSourcesClient">
            <summary>
            Provides functionality to query, create and manipulate datasources.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.GetAllAsync">
            <summary>
            Gets the names of all datasources that exist in the M.
            </summary>
            <returns>The names of all datasources that exist in M.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.GetAsync(System.String)">
            <summary>
            Gets the datasource with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the datasource to get (case insensitive).</param>
            <returns>The datasource with the specified <paramref name="name"/> or <see langword="null"/> if the datasource could not be found.</returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="name"/> contains only whitespaces.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.GetManyAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/> instances by
            the names of the option lists.
            The result can have a different ordering and size (when option list don't exist) than the input.
            </summary>
            <param name="names">Option list names (case insensitive).</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.GetManyCachedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/> instances by
            the names of the definitions.
            The result can have a different ordering and size (when option list don't exist) than the input.
            </summary>
            <param name="names">Option list names (case insensitive).</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.CreateAsync(Stylelabs.M.Sdk.Contracts.Base.IDataSource)">
            <summary>
            Creates a new datasource.
            </summary>
            <param name="dataSource">The datasource to create.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="dataSource"/> is <see langword="null"/>.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the datasource could not be created because it is not valid.
            Common cases:
            * The name of the datasource is invalid.
            * The datasource contains hierarchical values but has type "Flat".
            * A datasource with the specified name already exists.
            * Not all values have an identifier.
            * The identifiers of the values are not unique.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">Thrown when the user is not allowed to create datasources.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.UpdateAsync(Stylelabs.M.Sdk.Contracts.Base.IDataSource)">
            <summary>
            Updates a datasource.
            </summary>
            <param name="dataSource">The datasource to update.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the datasource could not be created because it is not valid.
            Common cases:
            * The datasource contains hierarchical values but has type "Flat".
            * Not all values have an identifier.
            * The identifiers of the values are not unique.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">Thrown when the user is not allowed to update datasources.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the datasource does not have a name.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">Thrown when the datasource with the specified name could not be found.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IDataSourcesClient.DeleteAsync(System.String)">
            <summary>
            Deletes the datasource with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the datasource to delete (case insensitive).</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="name"/> contains only whitespaces.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">Thrown when the user is not allowed to delete the datasource.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the datasource could not be deleted because a validation error occurred.
            Common case: the datasource is being used in one or more EntityDefinitions.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IEntitiesClient">
            <summary>
            Contains functionality to get and manipulate entities.
            </summary>
            <remarks>
            When possible, always include the specific properties and relations that are required when fetching entities.
            <seealso cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>
            </remarks>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The id of the entity to get.</param>
            <param name="loadConfiguration">The loading configuration for the entity.</param>
            <returns>The entity or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="id"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetManyAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets multiple <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances with the specified <paramref name="ids"/>.
            The result can have a different ordering and size (when entities don't exist) than the input.
            </summary>
            <param name="ids">The ids of the entities to get.</param>
            <param name="loadConfiguration">The loading configuration for the entity.</param>
            <returns>A (non-<see langword="null"/>) list of entities.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="ids"/> must contain strictly positive numbers.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance with the specified <paramref name="identifier"/>.
            </summary>
            <param name="identifier">The identifier of the entity to get.</param>
            <param name="loadConfiguration">The loading configuration for the entity.</param>
            <returns>The entity or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="identifier"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="identifier"/> cannot be a empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetManyAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets multiple <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances with the specified <paramref>
                <name>identifier</name>
            </paramref>
            s.
            The result can have a different ordering and size (when entities don't exist) than the input.
            </summary>
            <param name="identifiers">The identifiers of the entities to get.</param>
            <param name="loadConfiguration">The loading configuration for the entity.</param>
            <returns>A (non-<see langword="null"/>) list of entities.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref>
                <name>identifier</name>
            </paramref>
            cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="identifiers"/> cannot contain empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetByDefinitionAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration,System.Int32,System.Int32)">
            <summary>
            Queries for entities of the specified definition.
            </summary>
            <param name="definition">The name of the definition to get the entities for (case insensitive).</param>
            <param name="loadConfiguration">The loading configuration for entity.</param>
            <param name="skip">
            Skip specified number of entities.
            If no value is specified, no items will be skipped.
            </param>
            <param name="take">
            Take only specified number of entities.
            If no value is specified, the default <see cref="F:Stylelabs.M.Sdk.Defaults.Entities.Take"/> will be used.
            </param>
            <returns>The iterator.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="definition"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="definition"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameters <paramref name="skip"/> and <paramref name="take"/> must be greater than or equal to 0,
            and greater than 0 respectively.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetIdsByDefinitionAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Queries for entity ids of the specified definition.
            </summary>
            <param name="definition">The name of the definition to get the entities for (case insensitive).</param>
            <param name="skip">
            Skip specified number of entities.
            If no value is specified, no items will be skipped.
            </param>
            <param name="take">
            Take only specified number of entities.
            If no value is specified, the default <see cref="F:Stylelabs.M.Sdk.Defaults.Entities.Take"/> will be used.
            </param>
            <returns>The iterator.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="definition"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="definition"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameters <paramref name="skip"/> and <paramref name="take"/> must be greater than or equal to 0,
            and greater than 0 respectively.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetEntityIterator(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator"/> instance for the specified <paramref name="definition"/> that returns
            <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances. Results are sorted ascending on creation date.
            </summary>
            <param name="definition">The name of the definition to get the entities for (case insensitive).</param>
            <param name="loadConfiguration">The loading configuration for entity.</param>
            <returns>The iterator.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="definition"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="definition"/> cannot be a empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.GetEntityIdIterator(System.String)">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdIterator"/> instance for the specified <paramref name="definition"/> that returns
            entity ids Results are sorted ascending on creation date.
            </summary>
            <param name="definition">The name of the definition to get the entities for (case insensitive).</param>
            <returns>The iterator.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="definition"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="definition"/> cannot be a empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.SaveAsync(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Saves the entity in M.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns>The id of the entity in M.</returns>
            <remarks>
            The existing <paramref name="entity"/> will not be updated in any way.
            If any information is needed that was generated on the server after persisting,
            they entity will need to be fetched again.
            </remarks>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the entity could not be saved because a validation error occurred.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="entity"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.DeleteAsync(System.Int64)">
            <summary>
            Deletes the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> with the specified id in M.
            If the entity doesn't exist, nothing will happen.
            </summary>
            <param name="entityId">The id of the entity to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            Thrown when the entity exists but could not be deleted.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameter <paramref name="entityId"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntitiesClient.CopyAsync(System.Int64,Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <summary>
            Copies an entity by id to a new or existing entity.
            </summary>
            <param name="entityId">The source entity id.</param>
            <param name="copyOptions">The copy options.</param>
            <returns>The id of the copied entity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameter <paramref name="entityId"/> must be a strictly positive number.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="copyOptions"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient">
            <summary>
            Contains functionality to get entity definitions and their entities.
            </summary>
            <remarks>
            This client exposes a lot of methods that also have cached version.
            It is generally advised to use the cached variants.
            </remarks>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetAsync(System.String)">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instance by the specified <paramref name="name"/>.
            </summary>
            <param name="name">Entity definition name (case insensitive).</param>
            <returns>
            The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetCachedAsync(System.String)">
            <summary>
            Gets the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instance by the specified <paramref name="name"/>.
            </summary>
            <param name="name">Entity definition name (case insensitive).</param>
            <returns>
            The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetAsync(System.Int64)">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instance by the specified <paramref name="id"/>.
            </summary>
            <param name="id">Entity definition id.</param>
            <returns>
            The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="id"/> must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetCachedAsync(System.Int64)">
            <summary>
            Gets the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instance by the specified <paramref name="id"/>.
            </summary>
            <param name="id">Entity definition id.</param>
            <returns>
            The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="id"/> must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetNameAsync(System.Int64)">
            <summary>
            Gets the name of the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The id of the definition to get the name of.</param>
            <returns>The name of the specified definition or <see langword="null"/> if it doesn't exist.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="id"/> must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetNameCachedAsync(System.Int64)">
            <summary>
            Gets the name of the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The id of the definition to get the name of.</param>
            <returns>The name of the specified definition or <see langword="null"/> if it doesn't exist.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="id"/> must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetNamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the entity definition names by the ids of the definitions.
            </summary>
            <param name="ids">Entity definition ids.</param>
            <returns>
            Non <see langword="null"/> dictionary that maps the definition ids to names.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="ids"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="ids"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetNamesCachedAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the cached entity definition names by the ids of the definitions.
            </summary>
            <param name="ids">Entity definition ids.</param>
            <returns>
            Non <see langword="null"/> dictionary that maps the definition ids to names.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="ids"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="ids"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetIdAsync(System.String)">
            <summary>
            Gets the id of the specified entity definition.
            </summary>
            <param name="name">Entity definition name (case insensitive).</param>
            <returns>
            The entity definition id or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetIdCachedAsync(System.String)">
            <summary>
            Gets the id of the specified cached entity definition.
            </summary>
            <param name="name">Entity definition name (case insensitive).</param>
            <returns>
            The entity definition id or <see langword="null"/> if the entity definition
            does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetManyAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances by
            the names of the definitions.
            The result can have a different ordering and size (when definitions don't exist) than the input.
            </summary>
            <param name="names">Entity definition names (case insensitive).</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetManyCachedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances by
            the names of the definitions.
            The result can have a different ordering and size (when definitions don't exist) than the input.
            </summary>
            <param name="names">Entity definition names (case insensitive).</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetManyAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances by
            the ids of the definitions.
            The result can have a different ordering and size (when definitions don't exist) than the input.
            </summary>
            <param name="ids">The ids.</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="ids"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="ids"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetManyCachedAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the cached <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances by
            the ids of the definitions.
            The result can have a different ordering and size (when definitions don't exist) than the input.
            </summary>
            <param name="ids">The ids.</param>
            <returns>
            Non <see langword="null"/> collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="ids"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="ids"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the entity definition ids by the names of the definitions.
            </summary>
            <param name="names">Entity definition names (case insensitive).</param>
            <returns>
            Non <see langword="null"/>, case-insensitive dictionary that maps the definition names to ids.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetIdsCachedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the cached entity definition ids by the names of the definitions.
            </summary>
            <param name="names">Entity definition names (case insensitive).</param>
            <returns>
            Non <see langword="null"/>, case-insensitive dictionary that maps the definition names to ids.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetManyIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the entity definition ids by the names of the definitions.
            The ids have the same ordering as the <paramref name="names"/>, except for definitions that were not found.
            </summary>
            <remarks>
            It is recommended to use <see cref="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetIdsAsync(System.Collections.Generic.IEnumerable{System.String})"/> instead, because the mapping is much clearer.
            </remarks>
            <param name="names">Entity definition names (case insensitive).</param>
            <returns>
            Non <see langword="null"/> collection of entity definition ids.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains <see langword="null"/> or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetRangeAsync(System.Int64,System.Int64)">
            <summary>
            Gets a set of  <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances in the system by specified range.
            Results are ordered ascending by id.
            </summary>
            <param name="skip">
            Skip specified number of entity definitions.
            If no value is specified, no items will be skipped.
            </param>
            <param name="take">
            Take only specified number of entity definitions.
            </param>
            <returns>A query result of entity definitions.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameters <paramref name="skip"/> and <paramref name="take"/> must be greater than or equal to 0.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.GetRangeIdsAsync(System.Int64,System.Int64)">
            <summary>
            Gets a set of entity definition ids in the system by specified range.
            Results are ordered ascending by id.
            </summary>
            <param name="skip">
            Skip specified number of entity definitions.
            If no value is specified, no items will be skipped.
            </param>
            <param name="take">
            Take only specified number of entity definitions.
            </param>
            <returns>A query result of entity definition ids.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameters <paramref name="skip"/> and <paramref name="take"/> must be greater than or equal to 0.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.SaveAsync(Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition)">
            <summary>
            Saves the entity definition in Content Hub.
            </summary>
            <param name="entityDefinition">The entity definition to save.</param>
            <returns>The id of the entity definition in Content Hub.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the entity definition could not be saved because a validation error occurred.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="entityDefinition"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.DeleteAsync(System.Int64)">
            <summary>
            Deletes the entity definition in Content Hub.
            If the entity definition doesn't exist, nothing will happen.
            </summary>
            <param name="id">The id of the entity definition to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            Thrown when the entity definition exists but could not be deleted.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameter <paramref name="id"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.DeleteAsync(System.String)">
            <summary>
            Deletes the entity definition in Content Hub.
            If the entity definition doesn't exist, nothing will happen.
            </summary>
            <param name="name">The name of the entity definition to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            Thrown when the entity definition exists but could not be deleted.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.CreateEntityDefinitionIterator(System.Int64)">
            <summary>
            Creates an iterator to iterate over all the available <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> instances
            in the system.
            Results are ordered ascending by id.
            </summary>
            <param name="pageSize">The page size.</param>
            <returns>An entity definition iterator.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IEntityDefinitionsClient.CreateEntityDefinitionIdIterator(System.Int64)">
            <summary>
            Creates an iterator to iterate over all the available entity definition ids
            in the system.
            Results are ordered ascending by id.
            </summary>
            <param name="pageSize">The page size.</param>
            <returns>An entity definition id iterator.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IJobsclient">
            <summary>
            Contains functionality to create jobs.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IJobsclient.CreateFetchJobAsync(Stylelabs.M.Sdk.Contracts.Jobs.IFetchJobRequest)">
            <summary>
            Creates a new fetch job.
            </summary>
            <param name="request">Describes the fetch-job.</param>
            <returns>The id of the new job.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="request"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When one or more validation errors occurred (on the fetch request).
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.INotificationsClient">
            <summary>
            Contains functionality to manage and send notifications.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.GetMailTemplateAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets an mail template entity by name.
            </summary>
            <param name="name">Name of the mail template.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The mail template entity or <see langword="null"/> if it does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.GetMailTemplateEntityAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets an mail template entity by name.
            </summary>
            <param name="name">Name of the mail template.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The mail template entity or <see langword="null"/> if it does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.GetMailTemplatesAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets mail template entities by name.
            The result can have a different ordering and size (when entities don't exist) than the input.
            </summary>
            <param name="names">Names of the mail templates.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The mail template entities. Can contain <see langword="null"/> when a mail template was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.GetMailTemplateEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets mail template entities by name.
            The result can have a different ordering and size (when entities don't exist) than the input.
            </summary>
            <param name="names">Names of the mail templates.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The mail template entities. Can contain <see langword="null"/> when a mail template was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="names"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="names"/> contains empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestById)">
            <summary>
            Sends an e-mail to users by user id.
            </summary>
            <param name="mailRequest">Mail request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="mailRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="mailRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestByUsername)">
            <summary>
            Sends an e-mail to users by username.
            </summary>
            <param name="mailRequest">Mail request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="mailRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="mailRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestBroadcast)">
            <summary>
            Sends an e-mail to all users in M.
            </summary>
            <param name="mailRequest">Mail request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="mailRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="mailRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestById)">
            <summary>
            Sends a real-time notification (browser notification) to users by user id.
            </summary>
            <param name="realtimeRequest">Real-time request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="realtimeRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="realtimeRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestByUsername)">
            <summary>
            Sends a real-time notification (browser notification) to users by username.
            </summary>
            <param name="realtimeRequest">Real-time request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="realtimeRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="realtimeRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestBroadcast)">
            <summary>
            Sends a real-time notification (browser notification) to all users in M.
            </summary>
            <param name="realtimeRequest">Real-time request information.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="realtimeRequest"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When <paramref name="realtimeRequest"/> has invalid properties.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Sends a registration confirmation e-mail to the specified users by id.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="userIds">Users that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="userIds"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="userIds"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.Int64[])">
            <summary>
            Sends a registration confirmation e-mail to the specified users by id.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="userIds">Users that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="userIds"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="userIds"/> contains ids that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.Int64)">
            <summary>
            Sends a registration confirmation e-mail to the specified user by id.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="userId">User that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="userId"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends a registration confirmation e-mail to the specified users by username.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="usernames">Users that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="usernames"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="usernames"/> contains empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.String[])">
            <summary>
            Sends a registration confirmation e-mail to the specified users by username.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="usernames">Users that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="usernames"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="usernames"/> contains empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.INotificationsClient.SendConfirmationEmailAsync(System.String)">
            <summary>
            Sends a registration confirmation e-mail to the specified user by username.
            </summary>
            <remarks>
            This action requires the 'SendConfirmationEmail' privilege.
            </remarks>
            <param name="username">User that will receive the registration confirmation e-mail.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="username"/> is empty or whitespace.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IPackageClient">
            <summary>
            Contains functionality to manage package export and import.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPackageClient.GetExportOptionsAsync(System.Globalization.CultureInfo)">
            <summary>
            Fetches the available export options.
            </summary>
            <param name="culture">
            Culture to be used for fetched labels
            E.g. en-US
            When null, the glossary item keys are returned as the labels.
            </param>
            <returns>
            A dictionary containing the option invariants (keys) and their translations (values)
            E.g. {{ "schema": "Entity definitions" }, ... }.
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPackageClient.ExportAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Start an export operation.
            </summary>
            <param name="toExport">
            A collection of items to export. Available options can be fetched using <see cref="M:Stylelabs.M.Sdk.Clients.IPackageClient.GetExportOptionsAsync(System.Globalization.CultureInfo)"/>
            E.g. { "policies", "portal_pages" }.
            </param>
            <param name="includeSystemOwned">Flag to indicate if system owned items should be in the package.</param>
            <param name="since">Date since last item modification, to be used to filter exported items.</param>
            <returns>Created download order id.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="toExport"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IPermissionsClient">
            <summary>
            Client for fetching entity permissions.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPermissionsClient.GetPermissionsAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Gets the permissions for the specified entity.
            </summary>
            <param name="entityId">The entity id.</param>
            <param name="userId">The user id.</param>
            <returns>A set of all permissions for the specified entity.</returns>
            <remarks>If userId is not provided, the permissions for the current user will be returned.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="entityId"/> must be a strictly positive number.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="userId"/> must be a strictly positive number, when provided.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IPoliciesClient">
            <summary>
            Contains functionality to get and update policies.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPoliciesClient.GetUserPolicyAsync(System.Int64)">
            <summary>
            Gets the policy from specified user.
            </summary>
            <param name="userId">Id of the user to get the policy from.</param>
            <returns>The policy or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="userId"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPoliciesClient.GetUserGroupPolicyAsync(System.Int64)">
            <summary>
            Gets the policy from specified user group.
            </summary>
            <param name="userGroupId">Id of the user group to get the policy from.</param>
            <returns>The policy or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="userGroupId"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IPoliciesClient.UpdateAsync(Stylelabs.M.Sdk.Contracts.Policies.IPolicy)">
            <summary>
            Updates the specified policy.
            </summary>
            <param name="policy">The policy to update.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            Thrown when the policy could not be saved because a validation error occurred.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="policy"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IQueryingClient">
            <summary>
            Contains functionality to query and scroll for entities.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.SingleAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
             <summary>
             Gets a single entity that matches the query.
             </summary>
             <param name="query">The query to execute.</param>
             <param name="loadConfiguration">
             The load configuration. If it is <see langword="null"/>, then <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>
             will be used.
             </param>
             <returns>The entity that matches the query or <see langword="null"/>
             if there are no results.
             </returns>
             <remarks>
             For compatibility with the 3.0 SDK, the loading configuration is resolved as follows:
            
             1. The <paramref name="loadConfiguration"/> will be used, if not <see langword="null"/>.
             2. The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/> from the <paramref name="query"/> will be used, if not <see langword="null"/> and if applicable.
             3. Otherwise, defaults to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="query"/> cannot be <see langword="null"/>.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             When the <paramref name="query"/> matches multiple entities.
             </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.SingleIdAsync(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Gets a the id of the entity that matches the query.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>The id of the entity that matches the query or <see langword="null"/>
            if there are no results.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the <paramref name="query"/> matches multiple entities.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.QueryAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
             <summary>
             Retrieves entities matching the <paramref name="query"/>.
             </summary>
             <param name="query">The query to execute.</param>
             <param name="loadConfiguration">
             The load configuration. If it is <see langword="null"/>, then <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>
             will be used.
             </param>
             <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult"/> containing the results of the query.</returns>
             <remarks>
             For compatibility with the 3.0 SDK, the loading configuration is resolved as follows:
            
             1. The <paramref name="loadConfiguration"/> will be used, if not <see langword="null"/>.
             2. The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/> from the <paramref name="query"/> will be used, if not <see langword="null"/> and if applicable.
             3. Otherwise, defaults to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="query"/> cannot be <see langword="null"/>.
             </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.QueryIdsAsync(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Retrieves the ids of entities matching the <paramref name="query"/>.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult"/> containing the results of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.CreateEntityIterator(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
             <summary>
             Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator"/> that iterates over all results matched by the <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
             </summary>
             <param name="query">The query to iterate.</param>
             <param name="loadConfiguration">
             The load configuration. If it is <see langword="null"/>, then <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>
             will be used.
             </param>
             <returns>An iterator.</returns>
             <remarks>
             For compatibility with the 3.0 SDK, the loading configuration is resolved as follows:
            
             1. The <paramref name="loadConfiguration"/> will be used, if not <see langword="null"/>.
             2. The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/> from the <paramref name="query"/> will be used, if not <see langword="null"/> and if applicable.
             3. Otherwise, defaults to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="query"/> cannot be <see langword="null"/>.
             </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.CreateEntityIdIterator(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator"/> that iterates over all ids matched by the <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
            </summary>
            <param name="query">The query to iterate.</param>
            <returns>An iterator.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.CreateEntityScroller(Stylelabs.M.Base.Querying.Query,System.Nullable{System.TimeSpan},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
             <summary>
             Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScroller"/> that scrolls over all entities that match the <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
             </summary>
             <param name="query">The query to scroll.</param>
             <param name="scrollTime">
             The time for the scroll to live.
             If it is not specified, <see cref="F:Stylelabs.M.Sdk.Defaults.Scrolling.ScrollTime"/> will be used.
             The scroll time should not be too long, just enough to process each batch of results.
             </param>
             <param name="loadConfiguration">
             The load configuration. If it is <see langword="null"/>, then <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>
             will be used.
             </param>
             <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScroller"/> instance.</returns>
             <remarks>
             Use scrolling wisely and try to limit the <paramref name="scrollTime"/> for the scroll to live.
             Using scrolling inappropriately can cause performance issues.
             See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html for more information.
             </remarks>
             <remarks>
             For compatibility with the 3.0 SDK, the loading configuration is resolved as follows:
            
             1. The <paramref name="loadConfiguration"/> will be used, if not <see langword="null"/>.
             2. The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/> from the <paramref name="query"/> will be used, if not <see langword="null"/> and if applicable.
             3. Otherwise, defaults to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="query"/> cannot be <see langword="null"/>.
             </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IQueryingClient.CreateEntityIdScroller(Stylelabs.M.Base.Querying.Query,System.Nullable{System.TimeSpan})">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScroller"/> that scrolls over all ids of entities that match the <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
            </summary>
            <param name="query">The query to scroll.</param>
            <param name="scrollTime">
            The time for the scroll to live.
            If it is not specified, <see cref="F:Stylelabs.M.Sdk.Defaults.Scrolling.ScrollTime"/> will be used.
            The scroll time should not be too long, just enough to process each batch of results.
            </param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScroller"/> instance.</returns>
            <remarks>
            Use scrolling wisely and try to limit the <paramref name="scrollTime"/> for the scroll to live.
            Using scrolling inappropriately can cause performance issues.
            See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html for more information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IScriptsClient">
            <summary>
            Contains functionality to execute scripts.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IScriptsClient.ExecuteActionScriptAsync(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Executes specified action script.
            </summary>
            <param name="identifier">The identifier of the script.</param>
            <param name="arguments">The arguments to pass to the script.</param>
            <returns>The result of the script. If the script didn't set a result, <see langword="null" /> is returned.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">The script with the specified <paramref name="identifier"/> could not be found.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ScriptException">Something went wrong during the execution of the script.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.ISettingsClient">
            <summary>
            Client for fetching setting and category entities.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ISettingsClient.GetCategoryIdAsync(System.String)">
            <summary>
            Gets the id of a category by name.
            </summary>
            <param name="name">The category name.</param>
            <returns>Id of the category entity.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be an empty or whitespace string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ISettingsClient.GetSettingAsync(System.String,System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the setting with the specified <paramref name="name"/> from the specified <paramref name="category"/>.
            If the category or setting could not be found, <see langword="null"/> is returned.
            </summary>
            <param name="category">The category to get the setting from.</param>
            <param name="name">The name of the setting to get.</param>
            <param name="loadConfiguration">Load configuration.</param>
            <returns>The setting with the specified name from the specified category or <see langword="null"/> if that setting doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">
            Parameters <paramref name="category"/> and <paramref name="name"/> cannot be an empty or whitespace string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="category"/> and <paramref name="name"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ISettingsClient.GetSettingsForCategoryAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the settings for the specified <paramref name="category"/>.
            </summary>
            <param name="category">The category to get the setting for.</param>
            <param name="loadConfiguration">Load configuration.</param>
            <returns>A list of all setting entities for the specified category.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">Unable to find the category with the specified name.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="category"/> cannot be an empty or whitespace string.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="category"/> cannot be <see langword="null"/>.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.ITranslationsClient">
            <summary>
            Contains functionality to manage translations.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ITranslationsClient.LocalizeAsync(System.String,System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Models.Localization.Parameter[])">
            <summary>
            Retrieves the localized string for the given <paramref name="entryName"/>.
            </summary>
            <param name="contextName">The name of the translation context.</param>
            <param name="entryName">The name of the translation entry.</param>
            <param name="culture">The culture to load the translation in.</param>
            <param name="parameters">The named or positional parameters that will be inserted into the returned value.</param>
            <returns>The localized string for the given <paramref name="entryName"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.ITranslationsClient.LocalizeAsync(System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Models.Localization.Parameter[])">
            <summary>
            Retrieves the localized string for the given <paramref name="entryName"/>.
            </summary>
            <param name="entryName">The name of the translation entry.</param>
            <param name="culture">The culture to load the translation in.</param>
            <param name="parameters">The named or positional parameters that will be inserted into the returned value.</param>
            <returns>The localized string for the given <paramref name="entryName"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Clients.IUsersClient">
            <summary>
            Client for fetching user entities and user related actions.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserIdAsync(System.String)">
            <summary>
            Gets the id of the specified user by username.
            </summary>
            <param name="username">The user name.</param>
            <returns>The user's id or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="username"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="username"/> cannot be empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the ids of the specified users by username.
            </summary>
            <param name="usernames">A list of user names.</param>
            <returns>
            Non <see langword="null"/>, case-insensitive dictionary that maps the user names to ids.
            Users that don't exist, will not be in the result.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="usernames"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="usernames"/> cannot contain empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUsernameAsync(System.Int64)">
            <summary>
            Gets the username of the specified user.
            </summary>
            <param name="id">The id of the user.</param>
            <returns>The username or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="id"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUsernamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the usernames of the specified users.
            </summary>
            <param name="ids">The ids of the entities to get.</param>
            <returns>
            Non <see langword="null"/> dictionary that maps the user ids to usernames.
            Users that don't exist, will not be in the result.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="ids"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="ids"/> cannot contains numbers that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user entity.
            </summary>
            <param name="id">The id of the user.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user entity or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUsersAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user entities.
            </summary>
            <param name="ids">The ids of the users.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user entities. Can contain <see langword="null"/> when a user was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user entity.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUsersAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user entities.
            </summary>
            <param name="usernames">A list of user names.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user entities. Can contain <see langword="null"/> when a user was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupIdAsync(System.String)">
            <summary>
            Gets the ids of the specified user groups by name.
            </summary>
            <param name="groupName">The groupName name.</param>
            <returns>The group's id or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="groupName"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="groupName"/> cannot be empty or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the ids of the specified user groups by name.
            </summary>
            <param name="groupNames">A list of group names.</param>
            <returns>
            Non <see langword="null"/>, case-insensitive dictionary that maps the user group names to ids.
            Users that don't exist, will not be in the result.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="groupNames"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="groupNames"/> cannot contain empty or whitespace strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupNameAsync(System.Int64)">
            <summary>
            Gets the name of the specified user group.
            </summary>
            <param name="id">The id of the user group.</param>
            <returns>The group name or <see langword="null"/> when it was not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="id"/> must be a strictly positive number.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupNamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the name of the specified user groups.
            </summary>
            <param name="ids">The ids of user groups.</param>
            <returns>
            Non <see langword="null"/> dictionary that maps the user group ids to user group names.
            Users that don't exist, will not be in the result.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="ids"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="ids"/> cannot contains numbers that are not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user group entity.
            </summary>
            <param name="id">Id of the user.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupsAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user group entities.
            </summary>
            <param name="ids">The ids of the user groups.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user group entities. Can contain <see langword="null"/> when a user group was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the user group by the specified name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="loadConfiguration">The loading configuration.</param>
            <returns>The user group entity or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.GetUserGroupsAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the specified user group entities.
            </summary>
            <param name="groupNames">The names of the user groups.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The user group entities. Can contain <see langword="null"/> when a user group was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.SetPasswordAsync(System.Int64,System.String)">
            <summary>
            Changes the password of the specified user.
            </summary>
            <param name="id">The user id to change the password on.</param>
            <param name="password">The password to reset.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the current user is not a superuser.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="id"/> is not strictly positive.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="password"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Clients.IUsersClient.ResetPasswordAsync(System.Int64)">
            <summary>
            Resets the password of the specified user.
            This sends an e-mail to the specified user with a link to choose a new password.
            </summary>
            <param name="id">Id of the user.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the current user is not a superuser.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Constants">
            <summary>
            Utility class that contains constants.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.DataSourceType">
            <summary>
            Describes types of data sources.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.DataSourceType.Flat">
            <summary>
            Does not allow nesting of option list values.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.DataSourceType.Hierarchical">
            <summary>
            Allows nesting option list values.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IChildRelation">
            <summary>
            Base interface for all child relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IChildRelation.InheritsSecurity">
            <summary>
            Gets or sets a value indicating whether indicates the relation is used to inherit any security
            related metadata (from the parents towards the children).
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IChildToManyParentsRelation">
            <summary>
            A relation where the child has many parents.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IChildToManyParentsRelation.Parents">
            <summary>
            Gets the list of parents (never <see langword="null"/>).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IChildToManyParentsRelation.GetParentProperties(System.Int64)">
            <summary>
            Gets the parent properties.
            </summary>
            <param name="id">The entity id.</param>
            <returns>The parent properties.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IChildToOneParentRelation">
            <summary>
            A relation where the child has one parent.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IChildToOneParentRelation.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IChildToOneParentRelation.GetParentProperties">
            <summary>
            Gets the parent properties.
            </summary>
            <returns>The parent properties.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty">
            <summary>
            Represents a property that does not use cultures.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty.GetValue">
            <summary>
            Gets the value of the property.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty.GetValue``1">
            <summary>
            Gets the value of the property.
            </summary>
            <typeparam name="T">Type of the value (preferable nullable).</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty.SetValue(System.Object)">
            <summary>
            Sets the value of the property.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty">
            <summary>
            Represents a property where values are mapped to specific cultures.
            </summary>
            <remarks>
            It is not possible to get or set a value in a culture when that culture
            was not loaded on the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.
            It is possible to set values in cultures that are not enabled in M,
            if they are loaded on the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>, but they will not be persisted.
            </remarks>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetValue(System.Globalization.CultureInfo)">
            <summary>
            Gets the value for a specific culture.
            </summary>
            <param name="culture">Culture of the value.</param>
            <returns>
            The value or <see langword="null"/> if it has no value for this culture.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetValue``1(System.Globalization.CultureInfo)">
            <summary>
            Gets the value for a specific culture.
            </summary>
            <typeparam name="T">Type of the value (preferable nullable).</typeparam>
            <param name="culture">Culture of the value.</param>
            <returns>
            The value or <see langword="null"/> if it has no value for this culture.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetValues">
            <summary>
            Gets all values per culture in a non generic way.
            </summary>
            <returns>Property values.</returns>
            <remarks>
            This method only returns the values in the cultures the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>
            was loaded in.
            </remarks>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetValues``1">
            <summary>
            Gets all values per culture.
            </summary>
            <typeparam name="T">Type of the value (preferable nullable).</typeparam>
            <returns>All property values.</returns>
            <remarks>
            This method only returns the values in the cultures the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>
            was loaded in.
            </remarks>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetValues``1(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Gets all values in the requested cultures.
            </summary>
            <typeparam name="T">Type of the value (preferable nullable).</typeparam>
            <param name="cultures">Cultures to include.</param>
            <returns>All property values in the requested cultures.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="cultures"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="cultures"/> contains <see langword="null"/> or
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.GetCultures">
            <summary>
            Gets all cultures that the property supports.
            These are always equal to the cultures the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>
            was loaded with.
            </summary>
            <returns>The cultures (never <see langword="null"/>).</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty.SetValue(System.Globalization.CultureInfo,System.Object)">
            <summary>
            Sets a value for a specific culture.
            </summary>
            <param name="culture">Culture of the value.</param>
            <param name="value">Value.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the <paramref name="culture"/> is not loaded on the entity.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource">
            <summary>
            A collection of predefined values for fields.
            Also known as 'option lists'.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSource.Name">
            <summary>
            Gets the name of the datasource.
            Can only contain letters, numbers, dots or underscores.
            Because it is used as an identifier, this also needs to be unique.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSource.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether the datasource is editable.
            <see langword="false"/> (default) allows the datasource to be editable,
            <see langword="false"/> locks the datasource preventing any further modifications.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSource.Labels">
            <summary>
            Gets optional translation(s) of the canonical name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSource.Type">
            <summary>
            Gets the type of the datasource.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IDataSource.GetDataSourceValues">
            <summary>
            Gets a list of the data source values. Use the properties on
            <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IFlatDataSource"/> or <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSource"/>.
            to make changes.
            </summary>
            <returns>The list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSourceValue"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource`1">
            <summary>
            A collection of predefined values for fields.
            Also known as 'option lists'.
            </summary>
            <typeparam name="T">The data source type.</typeparam>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSource`1.Values">
            <summary>
            Gets the list of data source values.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IDataSourceCache">
            <summary>
            Defines an option list cache.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IDataSourceCache.Get(System.String)">
            <summary>
            Gets an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>.
            </summary>
            <param name="dataSourceName">The name of the option list.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IDataSourceCache.Invalidate(System.String)">
            <summary>
            Invalidates a cache entry.
            </summary>
            <param name="dataSourceName">The name of the option list.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IDataSourceCache.Load(Stylelabs.M.Sdk.Contracts.Base.IDataSource)">
            <summary>
            Loads an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>.
            </summary>
            <param name="dataSource">The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IDataSourceValue">
            <summary>
            Values for a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>.
            Also known as 'option list value'.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSourceValue.Identifier">
            <summary>
            Gets the name of the value.
            Because it is used as an identifier, it needs to be unique.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IDataSourceValue.Labels">
            <summary>
            Gets the canonical name and optional other translated values.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IEntity">
            <summary>
            Represents an entity in Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Id">
            <summary>
            Gets the id of the entity.
            The id is an automatically assigned, read only, unique and strictly positive
            number identifying the entity.
            The id is <see langword="null"/> if the entity has not been persisted yet.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Identifier">
            <summary>
            Gets or sets the identifier of the entity.
            The identifier can be set on a new entities, until it is persisted.
            However, it must always be unique.
            The identifier will be auto generated when it is <see langword="null"/> when persisting.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Cannot set identifier when entity is not new.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Cannot set <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Cannot set a whitespace identifier.
            </exception>
            <exception cref="T:System.ArgumentException">
            Value exceeds max identifier length.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.IsNew">
            <summary>
            Gets a value indicating whether the entity is new (id is <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.DefinitionName">
            <summary>
            Gets the name of the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> that defines
            this entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.LockedBy">
            <summary>
            Gets the id of the user who locked this entity.
            <see langword="null"/> if it has not been locked.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.LockedOn">
            <summary>
            Gets the date on which this entity was locked.
            <see langword="null"/> if it has not been locked.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.IsRootTaxonomyItem">
            <summary>
            Gets or sets a value indicating whether this entity is a top level facet.
            </summary>
            <seealso cref="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsTaxonomyItemDefinition"/>.
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.IsPathRoot">
            <summary>
            Gets or sets a value indicating whether this entity is a top level path.
            </summary>
            <seealso cref="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsPathEnabledDefinition"/>.
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.InheritsSecurity">
            <summary>
            Gets or sets a value indicating whether the entity inherits security
            from its ancestors connected via relations with
            <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IChildRelation.InheritsSecurity"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether the entity is owned by the system
            and cannot be modified or deleted by the regular users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Version">
            <summary>
            Gets the current version of the entity.
            Version is a monotonically increasing number (from 1 up).
            Any change(s) of the entity propagated to the persistent storage
            will cause this number to be incremented.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Cultures">
            <summary>
            Gets a list of all cultures that the entity
            was loaded with. Never returns <see langword="null"/>.
            All <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty"/> properties can
            only contains values for these cultures.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Properties">
            <summary>
            Gets a list of all properties that are currently loaded
            on the entity. Never returns <see langword="null"/>.
            </summary>
            <remarks>
            New properties can still be added by lazy loading them.
            </remarks>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Relations">
            <summary>
            Gets a list of all relations that are currently loaded
            on the entity. Never returns <see langword="null"/>.
            </summary>
            <remarks>
            New relations can still be added by lazy loading them.
            </remarks>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.Renditions">
            <summary>
            Gets a list of all renditions for this entity.
            Never returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntity.RelatedPaths">
            <summary>
            Gets a list of all related paths for this entity.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetProperty(System.String)">
            <summary>
            Gets the specified property.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetProperty``1(System.String)">
            <summary>
            Gets the specified property.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <typeparam name="T">The property type.</typeparam>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the specified property.
            Returns <see langword="null"/> when the property is not found.
            However, if the property is not present, it can be lazy loaded.
            </summary>
            <param name="name">Property name.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the specified property.
            Returns <see langword="null"/> when the property is not found.
            However, if the property is not present, it can be lazy loaded.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="name">Property name.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValue(System.String)">
            <summary>
            Gets the value of the specified culture insensitive property.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture sensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValue``1(System.String)">
            <summary>
            Gets the value of the specified culture insensitive
            property and casts it to the corresponding type.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <typeparam name="T">The property type.</typeparam>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture sensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValueAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the value of the specified culture insensitive
            property and casts it to the corresponding type.
            If the property is not present, it can be lazy loaded.
            </summary>
            <param name="name">Property name.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>
            Value of the property.
            If the property does not exist or is not loaded, it returns
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture sensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValueAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the value of the specified culture insensitive
            property and casts it to the corresponding type.
            If the property is not present, it can be lazy loaded.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="name">Property name.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>
            Value of the property.
            If the property does not exist or is not loaded, it returns
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture sensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValue(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified culture sensitive property.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <param name="culture">Property culture.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture insensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValue``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified culture sensitive property
            and casts it to the corresponding type.
            Returns <see langword="null"/> when the property is not found.
            </summary>
            <param name="name">Property name.</param>
            <param name="culture">Property culture.</param>
            <typeparam name="T">The value type.</typeparam>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture insensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPropertyValueAsync``1(System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the value of the specified culture sensitive
            property and converts it to the corresponding type.
            If the property is not present, it can be lazy loaded.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="name">Property name.</param>
            <param name="culture">Culture of the value.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>
            Value of the property in specified culture.
            If the property does not exist or is not loaded, it returns
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> or <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the property is culture insensitive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.SetPropertyValue(System.String,System.Object)">
            <summary>
            Sets the value of specified culture insensitive
            property.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the property is a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException">
            When the property does not exist or was not loaded.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.SetPropertyValue(System.String,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Sets the value of specified culture sensitive
            property.
            </summary>
            <param name="name">Property name.</param>
            <param name="culture">Culture of the value.</param>
            <param name="value">Property value.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> or <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the property is a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException">
            When the property does not exist or was not loaded.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Gets a relation by name.
            Returns <see langword="null"/> when the relation was not found.
            </summary>
            <param name="name">Name of the relation.</param>
            <param name="role">Role of the relation.</param>
            <returns>The relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the relation is self-referencing, meaning that
            there are two matching relations. This only happens when the role
            was not specified.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetRelation``1(System.String)">
            <summary>
            Gets a relation by name and tries to resolve the role automatically by the specified interface.
            Returns <see langword="null"/> when the relation was not found.
            </summary>
            <param name="name">Name of the relation.</param>
            <typeparam name="T">The relation type.</typeparam>
            <returns>The relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the relation is self-referencing, meaning that
            there are two matching relations. This only happens when the role
            was not specified.
            </exception>
            <exception cref="T:System.NotSupportedException">
            When the role could not be extracted from the interface.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetRelationAsync(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole},Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets the relation from the entity.
            Returns <see langword="null"/> when the relation was not found.
            However, when the relation is not present, it can be lazy loaded.
            </summary>
            <param name="name">Relation name.</param>
            <param name="role">The role of the relation.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>
            The relation or <see langword="null"/> when it does not exist or is not lazy loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When the relation is self-referencing, meaning that
            there are two matching relations. This only happens when the role
            was not specified.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetRelationAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets a relation by name and tries to resolve the role automatically by the specified interface.
            Returns <see langword="null"/> when the relation was not found.
            If the relation is not present, it can be lazy loaded.
            </summary>
            <typeparam name="T">Type of relation.</typeparam>
            <param name="name">Relation name.</param>
            <param name="loadOption">Enables (default) or disables lazy loading.</param>
            <returns>
            The relation or <see langword="null"/> when it does not exist or is not lazy loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When <paramref name="loadOption"/> is <see cref="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading"/> and
            lazy loading is not possible.
            </exception>
            <exception cref="T:System.NotSupportedException">
            When the role could not be extracted from the interface.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.CanDoLazyLoading">
            <summary>
            Checks if lazy loading is possible. Lazy loading is only possible on persisted entities.
            </summary>
            <returns><see langword="true"/> if lazy loading is possible.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.LoadPropertiesAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <summary>
            Loads the specified properties on the current entity.
            It will only load if it is actually missing properties and does not overwrite existing properties.
            </summary>
            <param name="propertyLoadOption">Properties to load.</param>
            <returns><see langword="true"/> if new properties were added on the current entity.</returns>
            <remarks>
            Culture sensitive properties will only be loaded in the current cultures.
            Lazy loading is only possible on entities that are not new.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="propertyLoadOption"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.LoadRelationsAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Loads the specified relations on the current entity.
            It will only load if it is actually missing relations and does not overwrite existing relations.
            </summary>
            <param name="relationLoadOption">Relations to load.</param>
            <returns><see langword="true"/> if new members were added on the current entity.</returns>
            <remarks>
            Lazy loading is only possible on entities that are not new.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="relationLoadOption"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.LoadMembersAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Loads the specified members on the current entity.
            It will only load if it is actually missing members and does not overwrite existing members.
            </summary>
            <param name="propertyLoadOption">Properties to load.</param>
            <param name="relationLoadOption">Relations to load.</param>
            <returns><see langword="true"/> if new members were added on the current entity.</returns>
            <remarks>
            Culture sensitive properties will only be loaded in the current cultures.
            Lazy loading is only possible on entities that are not new.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="propertyLoadOption"/> is <see langword="null"/> or
            <paramref name="relationLoadOption"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetRendition(System.String)">
            <summary>
            Gets an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRendition"/> by name.
            </summary>
            <param name="name">Name of the rendition.</param>
            <returns>
            The rendition or <see langword="null"/> when it does
            not exist.
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetEntityDefinitionAsync">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> of the entity.
            It is loaded once and will cache the result.
            </summary>
            <returns>The entity definition.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.GetPermissionsAsync">
            <summary>
            Gets the permissions that the current user has on this entity.
            </summary>
            <returns>A case insensitive set of permissions.</returns>
            <exception cref="T:System.InvalidOperationException">
            When the entity has not been persisted yet.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition">
            <summary>
            Represents a data schema / domain model for entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.Id">
            <summary>
            Gets the id of this definition.
            This is an automatically assigned unique and strictly positive
            number identifying the entity definition.
            <see langword="null"/> if has not been created.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsNew">
            <summary>
            Gets a value indicating whether the entity definition is new (id is <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.Name">
            <summary>
            Gets the unique and language agnostic name of the entity definition.
            It should be handled as case sensitive.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.DisplayTemplate">
            <summary>
            Gets or sets the language agnostic display format for entities
            of this definition.
            Formatted as follows: <c>{PropertyName}</c>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsTaxonomyItemDefinition">
            <summary>
            Gets or sets a value indicating whether entities of this entity definition
            are taxonomy items, they can be used as a
            search facet on the web pages.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsPathEnabledDefinition">
            <summary>
            Gets or sets a value indicating whether entities of this entity definition can be
            part of the so called paths, which are technically UI breadcrumbs.
            Example use cases are taxonomy entity definitions
            or Sitecore Content Hub Project block entity definitions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsManualSortingAllowed">
            <summary>
            Gets or sets a value indicating whether the items of this definition
            can be sorted manually (UI related).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether the entity definition is owned by the system
            and cannot be modified or deleted by the regular users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.Labels">
            <summary>
            Gets a collection of the culture specific definition labels.
            Never returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.MemberGroups">
            <summary>
            Gets the collection of member groups.
            Never returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetPropertyDefinition(System.String)">
            <summary>
            Get the definition of the specified property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>
            The property definition or <see langword="null"/>
            if it was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetPropertyDefinition``1(System.String)">
            <summary>
            Generic version of <see cref="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetPropertyDefinition(System.String)"/>.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>
            The property definition or <see langword="null"/>
            if it was not found.
            </returns>
            <typeparam name="T">A property (sub)type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetPropertyDefinitions">
            <summary>
            Gets all property definitions.
            </summary>
            <returns>
            A list of all property definitions
            (never <see langword="null"/>).
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetRelationDefinition(System.String,Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole)">
            <summary>
            Get the definition of the specified relation.
            </summary>
            <param name="name">Name of the relation.</param>
            <param name="role">Relation role.</param>
            <returns>
            The relation definition or <see langword="null"/>
            if it was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="name"/> is empty or whitespaces.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.GetRelationDefinitions">
            <summary>
            Gets all relation definitions.
            </summary>
            <returns>
            A list of all relation definitions
            (never <see langword="null"/>).
            </returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache">
            <summary>
            Defines an entity definition cache.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache.Get(System.Int64)">
            <summary>
            Gets an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
            <param name="id">The id of the entity definition.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache.Get(System.String)">
            <summary>
            Gets an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
            <param name="definitionName">The name of the entity definition.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache.Invalidate(System.Int64)">
            <summary>
            Invalidates a cache entry.
            </summary>
            <param name="id">The id of the entity definition.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache.Invalidate(System.String)">
            <summary>
            Invalidates a cache entry.
            </summary>
            <param name="definitionName">The name of the entity definition.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinitionCache.Load(Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition)">
            <summary>
            Loads an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
            <param name="entityDefinition">The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IFlatDataSource">
            <summary>
            A data source with flat values.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IFlatDataSourceValue">
            <summary>
            A flat data source value.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSource">
            <summary>
            A data source with hierarchical values.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSourceValue">
            <summary>
            A hierarchical data source value.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSourceValue.Values">
            <summary>
            Gets optional, contains nested <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSourceValue"/>s.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IIterator">
            <summary>
            Base interface for iterators.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IIterator.Current">
            <summary>
            Gets the current result. This is initially <see langword="null"/>.
            Use <see cref="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.MoveNextAsync"/> first.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.CanMoveNext">
            <summary>
            Checks if the iterator can move further through the results.
            </summary>
            <returns><see langword="true"/> if there more results.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.CanMovePrevious">
            <summary>
            Checks if the iterator can move backwards through the results.
            </summary>
            <returns><see langword="true"/> if there move backwards.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next page/batch of the collection.
            The result will be available in <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IIterator.Current"/>.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next page;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.MovePreviousAsync">
            <summary>
            Moves the enumerator backwards, to the previous page/batch of the collection.
            The result will be available in <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IIterator.Current"/>.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the previous page;
            <see langword="false"/> if the enumerator has passed the start of the collection.
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IIterator.Reset">
            <summary>
            Resets the iterator to start before the first result again.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IMember">
            <summary>
            Base interface for all member (properties and relations).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMember.Name">
            <summary>
            Gets see <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.Name"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMember.DefinitionType">
            <summary>
            Gets see <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.DefinitionType"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IMemberCondition">
            <summary>
            Base interface of all the conditions which are simple configurable
            boolean flags which determine if the member the condition is
            attached to, should or should not be displayed in the external
            API (e.g. REST API).
            Common usage is to be able to hide some members
            in the UI if the conditions are met.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberCondition.MemberName">
            <summary>
            Gets name of the entity definition member this condition is tied to.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition">
            <summary>
            Base interface for all member definitions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.Name">
            <summary>
            Gets or sets language agnostic case insensitive name of the member.
            Must be unique per member and <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>,
            except for self-referencing relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.AllowUpdates">
            <summary>
            Gets or sets a value indicating whether this member can be updated
            from external sources (e.g. REST API, SDK...).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.DefinitionType">
            <summary>
            Gets type of the member.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.Labels">
            <summary>
            Gets collection of the culture specific member labels.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.HelpText">
            <summary>
            Gets collection of the culture specific help text.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.IsConditional">
            <summary>
            Gets a value indicating whether indicates whether this member definition has any member conditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.Conditions">
            <summary>
            Gets the conditions that are evaluated to decide if this member
            should be exposed in the external API/UI.
            These conditions have no impact on data validity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether indicates if the member definition is owned by the system
            and cannot be modified or deleted by the regular users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberDefinition.IsSecured">
            <summary>
            Gets or sets a value indicating whether indicates if the read-write access to this
            member is restricted.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup">
            <summary>
            Member groups combine multiple members for the purpose of logical grouping,
            representation (API, UI) and/or access level.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.Name">
            <summary>
            Gets or sets language agnostic case insensitive name of the group.
            Must be unique per group and <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.ContentGroup">
            <summary>
            Gets or sets language agnostic case insensitive name of the content group.
            Used for grouping member groups for visual representation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.Labels">
            <summary>
            Gets collection of the culture specific member labels.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.MemberDefinitions">
            <summary>
            Gets collection the member definitions in this group.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether if this member group is owned by the system
            and cannot be modified or deleted by the regular users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.IsConditional">
            <summary>
            Gets a value indicating whether if this member group has conditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.Conditions">
            <summary>
            Gets the conditions that are evaluated to decide if this group
            should be exposed in the external API/UI.
            These conditions have no impact on data validity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IMemberGroup.IsSecured">
            <summary>
            Gets or sets a value indicating whether if the read-write access to this
            member is restricted.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IParentRelation">
            <summary>
            Base interface for all parent relations.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IParentToManyChildrenRelation">
            <summary>
            A relation where the parent has many children.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IParentToManyChildrenRelation.Children">
            <summary>
            Gets a list of children (never <see langword="null"/>).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IParentToManyChildrenRelation.GetChildProperties(System.Int64)">
            <summary>
            Gets the child properties.
            </summary>
            <param name="id">The entity id.</param>
            <returns>The child properties.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IParentToOneChildRelation">
            <summary>
            A relation where the parent has one child.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IParentToOneChildRelation.Child">
            <summary>
            Gets or sets the child.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IParentToOneChildRelation.GetChildProperties">
            <summary>
            Gets the child properties.
            </summary>
            <returns>The child properties.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IProperty">
            <summary>
            Base interface for properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IProperty.DataType">
            <summary>
            Gets the <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.DataType"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IProperty.IsMultiLanguage">
            <summary>
             Gets a value indicating whether is <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IsMultiLanguage"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition">
            <summary>
            Represents a data schema / domain model for properties
            on an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.DataType">
            <summary>
            Gets the <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.DataType"/> of the value for this property.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.Indexed">
            <summary>
            Gets or sets a value indicating whether the property value is indexed and
            thus searchable via the basic querying API.
            Search for value with indexed querying will always work.
            Note that this value should be set only if required
            and with good understanding of potential consequences.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IsMandatory">
            <summary>
            Gets or sets a value indicating whether the property is required to be set.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IsMultiLanguage">
            <summary>
            Gets or sets a value indicating whether the property is culture sensitive or
            not.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IsMultiValue">
            <summary>
            Gets or sets a value indicating whether the value is an array.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IsUnique">
            <summary>
            Gets or sets a value indicating whether the value of the property
            is unique among all the property values of
            this property definition and entity definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.Boost">
            <summary>
            Gets or sets a value indicating whether the content of this property
            is boosted when searched for via index querying
            (Elasticsearch powered).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IncludedInContent">
            <summary>
            Gets or sets a value indicating whether the property value is
            included in the full text search content
            of the Elasticsearch document.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IncludedInCompletion">
            <summary>
            Gets or sets a value indicating whether the property value is
            included in the collection of words used
            for auto-complete functionality in Sitecore Content Hub web portal.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRelatedPath">
            <summary>
            Represents a related path.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPath.Name">
            <summary>
            Gets or sets the name of the related path.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPath.Items">
            <summary>
            Gets or sets the related path items.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRelatedPathItem">
            <summary>
            Represents a related path item.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPathItem.Entity">
            <summary>
            Gets or sets the id of the entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPathItem.Definition">
            <summary>
            Gets or sets the name of the entity definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPathItem.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelatedPathItem.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRelation">
            <summary>
            Base interface for relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelation.Role">
            <summary>
            Gets the role of this instance in the relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelation.Properties">
            <summary>
            Gets the properties of the linked entity.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRelation.GetIds">
             <summary>
             This utility method allows getting the value of any type of relation.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation"/> the result will contain all ids on the relation.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation"/> the list can contain 1 id (maximum) if an id was set
             on the relation. If no id was set on the relation, an empty list is returned.
             </summary>
             <returns>A list of ids (never <see langword="null"/>).</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRelation.SetIds(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             Sets the ids on the relations values. The values should be strictly positive.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation"/>, the list of ids will be set on the relation.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation"/>, <paramref name="ids"/> can have at most one value.
             If the list is empty then the value will be set to <see langword="null"/>.
             </summary>
             <param name="ids">Ids.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="ids"/> cannot be <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             The id must be strictly positive.
             </exception>
             <exception cref="T:System.ArgumentException">
             If it is an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation"/>; <paramref name="ids"/> should contains maximum one id.
             </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRelation.SetIdentifiersAsync(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Sets the ids on the relations values based on the given identifiers.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation"/>, the list of ids will be set on the relation.
            
             In case of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation"/>, <paramref name="identifiers"/> can have at most one value.
             If the list is empty then the value will be set to <see langword="null"/>.
             </summary>
             <param name="identifiers">Identifiers.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="identifiers"/> cannot be <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentException">
             If it is an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation"/>; <paramref name="identifiers"/> should contain a single identifier.
             </exception>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRelation.Clear">
            <summary>
            Clears the value(s) of the relation.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition">
            <summary>
            Represents a data schema / domain model for relations
            on an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.Role">
            <summary>
            Gets or sets role of the relation on the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            Parent and child entity definitions share the same conceptual
            relation definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.Cardinality">
            <summary>
            Gets or sets cardinality of the relation from the <strong>parents</strong>
            point of view.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.AssociatedEntityDefinitionName">
            <summary>
            Gets or sets name of the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/> that
            is linked to the other end (see <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.Role"/>)
            of this <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.PathHierarchyScore">
            <summary>
            Gets or sets score given to the relation which is marked as
            <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsPathHierarchyRelation"/>. If entity
            has multiple parent hierarchy relations, the paths of entity
            will be sorted according to this score in ascending way.
            The first path, if not marked otherwise, will be
            used as a sole entity path when only one path is required.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.ChildIsMandatory">
            <summary>
            Gets or sets a value indicating whether relations of this definition
            must have at least one child.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.ParentIsMandatory">
            <summary>
            Gets or sets a value indicating whether relations of this definition
            must have at least one parent.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.InheritsSecurity">
            <summary>
            Gets or sets a value indicating whether if this relation is used to inherit any security
            related meta data (from the parents towards the children).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.AllowNavigation">
            <summary>
            Gets or sets a value indicating whether this relation can be used for
            navigation to parents or children in the external
            services (e.g. REST API). This can prevent
            potentially serious memory intensive operations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsNested">
            <summary>
            Gets or sets a value indicating whether the relation allows nesting
            of properties on the associated entity
            when accessed via the external services (e.g. REST API).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.NestedProperties">
            <summary>
            Gets collection of the property names of the associated
            entity to be used for nesting.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.NestedPermissions">
            <summary>
            Gets or sets a value indicating whether permissions are included
            when nesting this relation in an external
            service, in similar fashion as with property nesting.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsTaxonomyRelation">
            <summary>
            Gets or sets a value indicating whether the relation establishes
            a taxonomy.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsTaxonomyHierarchyRelation">
            <summary>
            Gets or sets a value indicating whether if the relation provides a link between
            parent and child taxonomy entities of the same
            entity definition, thus creating a taxonomy hierarchy.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.ContentIsCopied">
            <summary>
            Gets or sets a value indicating whether if the child of the relation copies
            full text search content of the ancestors connected
            via such marked relations into its full text search
            content.
            </summary>
            <seealso cref="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IncludedInContent"/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.CompletionIsCopied">
            <summary>
            Gets or sets a value indicating whether the child of the relation copies
            words collection, used for the auto–complete,
            of the ancestors connected via such marked relations
            into its collection of words used for the auto-complete
            functionality in Sitecore Content Hub web portal.
            </summary>
            <seealso cref="P:Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition.IncludedInCompletion"/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsPathRelation">
            <summary>
            Gets or sets a value indicating whether this relation provides a link between
            a parent entity with
            <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsPathEnabledDefinition"/>
            or an entity with such an ancestor.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsPathHierarchyRelation">
            <summary>
            Gets or sets a value indicating whether this relation provides a link between
            <see cref="P:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition.IsPathEnabledDefinition"/>,
            thus creating a path hierarchy.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.IsRenditionRelation">
            <summary>
            Gets or sets a value indicating whether this relation can be used to retrieve
            renditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition.AssociatedLabels">
            <summary>
            Gets collection of the culture specific member labels of the associated relation definition.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRendition">
            <summary>
            Represents a rendition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRendition.Name">
            <summary>
            Gets name of the rendition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRendition.Items">
            <summary>
            Gets collection of rendition items.
            </summary>
            <remarks>
            Depending on the file type, there can be one or more
            rendition items. For example a PDF will have
            an item per page.
            </remarks>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IRenditionItem">
            <summary>
            Is part of an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRendition"/>.
            </summary>
            <remarks>
            Depending on the file type, there can be one or more
            rendition items. For example a PDF will have
            an item per page.
            </remarks>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IRenditionItem.Href">
            <summary>
            Gets link to the rendition file.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRenditionItem.GetStreamAsync">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> containing the contents of the rendition item.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> containing the contents of the rendition item.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IRenditionItem.DownloadAsync(System.String,System.Boolean)">
            <summary>
            Downloads the rendition item to a location on disk.
            </summary>
            <param name="filePath">The location to download the file to.</param>
            <param name="overwrite">If the file is allowed to be overwritten.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> cannot be empty or whitespaces.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error, such as a disk error, occurred.
            Or the stream has been closed.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The requested write access is not permitted by the operating system
            for the specified file handle.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IResource">
            <summary>
            Describes a resource in M.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IResource.CreatedBy">
            <summary>
            Gets the id of the user who created this resource.
            <see langword="null"/> if it has not been created.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IResource.CreatedOn">
            <summary>
            Gets the date on which this resource was created.
            <see langword="null"/> if it has not been created.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IResource.ModifiedBy">
            <summary>
            Gets the id of the user who modified this resource.
            <see langword="null"/> if it has not been created.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Base.IResource.ModifiedOn">
            <summary>
            Gets the date on which this resource was modified.
            <see langword="null"/> if it has not been created.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation">
            <summary>
            Base interface for relation that are associated with
            many entities.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation.Add(System.Int64)">
            <summary>
            Adds an id to the relations values.
            </summary>
            <param name="id">Id.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation.AddRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Adds multiple ids to the relations values.
            </summary>
            <param name="ids">Ids.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ids"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Every id must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation.AddAsync(System.String)">
            <summary>
            Adds an id to the relations values.
            </summary>
            <param name="identifier">The identifier.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identifier"/> cannot be <see langword="null"/>.
            </exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToManyRelation.AddRangeAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds multiple ids to the relations values.
            </summary>
            <param name="identifiers">The identifiers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identifiers"/> cannot be <see langword="null"/>.
            </exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation">
            <summary>
            Base interface for relation that are associated with
            only one entity.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation.GetId">
            <summary>
            Gets the value of the relation.
            </summary>
            <returns>An id.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation.SetId(System.Nullable{System.Int64})">
            <summary>
            Sets the value of the relation.
            </summary>
            <param name="id">The id.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The id must be strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.IToOneRelation.SetIdentifierAsync(System.String)">
            <summary>
            Sets the value of the relation.
            </summary>
            <param name="identifier">The identifier.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="identifier"/> cannot be an empty or whitespace string.
            </exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity">
            <summary>
            An interface for strongly typed entities.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity.LoadTypedMembersAsync">
            <summary>
            Ensures that the members provided by the strongly typed class
            are loaded. To be used in combination with <see cref="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.CanDoLazyLoading"/>.
            Note that this will only load culture sensitive properties in the cultures that the entity was initially loaded with.
            </summary>
            <seealso cref="M:Stylelabs.M.Sdk.Contracts.Base.IEntity.LoadMembersAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)"/>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.MemberDefinitionType">
            <summary>
            Describes the type of member.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.MemberDefinitionType.Property">
            <summary>
            For properties.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.MemberDefinitionType.Relation">
            <summary>
            For relations.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption">
            <summary>
            The lazy loading options when working
            with <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IMember"/>s.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LocalOnly">
            <summary>
            Restricts getting members to
            members that are already loaded.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption.LazyLoading">
            <summary>
            Allows members to be lazy loaded when needed.
            For performance reasons, this should be used wisely.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.RelationCardinality">
            <summary>
            Describes the cardinality of a relation.
            All values are from Parent => Child.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.RelationCardinality.OneToMany">
            <summary>
            One parent to many children.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.RelationCardinality.ManyToMany">
            <summary>
            Many parents to many children.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.RelationCardinality.OneToOne">
            <summary>
            One parent to one child.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Base.StringContentType">
            <summary>
            The types of <see cref="T:System.String"/> contents.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.StringContentType.SingleLine">
            <summary>
            Content represents a single line <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.StringContentType.MultiLine">
            <summary>
            Content represents multiple lines of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.StringContentType.Html">
            <summary>
            Content represents a HTML code.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Base.StringContentType.Code">
            <summary>
            Content represents programming syntax, scripts, data formats like JSON...
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus">
            <summary>
            The final life cycle status values.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Created">
            <summary>
            Created.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.UnderReview">
            <summary>
            Under review.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Approved">
            <summary>
            Approved.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Rejected">
            <summary>
            Rejected.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Archived">
            <summary>
            Archived.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Deleted">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Content.IAsset">
            <summary>
            A strongly typed entity interface for assets.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Content.IAsset.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Content.IAsset.FileName">
            <summary>
            Gets or sets the filename.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IAsset.GetDescription(System.Globalization.CultureInfo)">
            <summary>
            Gets the description.
            </summary>
            <param name="culture">Culture of the description.</param>
            <returns>The description in specified culture.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IAsset.SetDescription(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="culture">Culture of the description.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IAsset.GetFinalLifeCycleStatusAsync">
            <summary>
            Gets the final life cycle status.
            </summary>
            <returns>The status or <see langword="null"/> when the relation wasn't loaded.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager">
            <summary>
            Contains operations on the final life cycle status of an Asset.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.ApproveAsync(System.Int64)">
            <summary>
            Approves an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Approved"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.ArchiveAsync(System.Int64)">
            <summary>
            Archives an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Archived"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.DirectPublishAsync(System.Int64)">
            <summary>
            Directly publishes an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Approved"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.RejectAsync(System.Int64,System.String)">
            <summary>
            Rejects an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Rejected"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <param name="reason">The rejection reason.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.RestoreAsync(System.Int64)">
            <summary>
            Restores an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.Approved"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.SubmitAsync(System.Int64)">
            <summary>
            Submits an Asset.
            State will become <see cref="F:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus.UnderReview"/>.
            </summary>
            <param name="id">Id of the asset.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the id is not from an Asset entity.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            When the transition is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the <paramref name="id"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.GetFinalLifeCycleStatusIdAsync(Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus)">
            <summary>
            Gets the id of a final life cycle status entity.
            </summary>
            <param name="status">The status.</param>
            <returns>The id or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager.GetFinalLifeCycleStatusIdAsync(System.String)">
            <summary>
            Gets the id of a final life cycle status entity.
            </summary>
            <param name="status">The status.</param>
            <returns>The id or <see langword="null"/> when it was not found.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.DirtyTracking.ICultureSensitiveDirtyTracking">
            <summary>
            Interface for components that support dirty tracking,
            and support cultures. Each culture can be dirty or not direct independent from
            each other.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.DirtyTracking.ICultureSensitiveDirtyTracking.GetDirtyCultures">
            <summary>
            Gets all cultures that have dirty values.
            </summary>
            <returns>A list of cultures.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking">
            <summary>
            Interface for components that support dirty tracking.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking.IsTracking">
            <summary>
            Gets a value indicating whether the object is tracking changes.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking.IsDirty">
            <summary>
            Gets a value indicating whether the object has unsaved changes.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking.StartTracking">
            <summary>
            Starts tracking the object for changes.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking.MarkClean">
            <summary>
            Marks the object as clean. This will set
            <see cref="P:Stylelabs.M.Sdk.Contracts.DirtyTracking.IDirtyTracking.IsDirty"/> to <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Jobs.IFetchJobRequest">
            <summary>
            Base interface for all fetch job requests.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Jobs.IFetchJobRequest.Description">
            <summary>
            Gets a user-friendly description of the fetch job.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Jobs.IFetchJobRequest.AssetId">
            <summary>
            Gets the id of the asset to link the newly fetched file to.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Jobs.IFetchJobRequest.Validate">
            <summary>
            Validates whether the fetch job is valid.
            </summary>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When one or more validation errors occurred.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Logging.ILogger">
            <summary>
            Base interface for SDK loggers.
            </summary>
            <remarks>
            Performance tips:
            * For static or constant strings, construct and pass the string directly.
            * For dynamic strings that require IO, make sure to pass
            a <see cref="T:System.Func`1"/> to the logger.
            * It is recommended to always pass a <see cref="T:System.Func`1"/>
            for debugging messages. This way, when debugging is disabled,
            the debug calls will have virtually no overhead. If you construct and pass
            strings directly, it will always have more overhead.
            </remarks>
        </member>
        <member name="E:Stylelabs.M.Sdk.Contracts.Logging.ILogger.OnLog">
            <summary>
            Fires an event just before something is about to be logged.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether debug-level logging is enabled.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether info-level logging is enabled.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether warning-level logging is enabled.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether error-level logging is enabled.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.ILogger.MinimumLogLevel">
            <summary>
            Gets or sets the minimum enabled log level.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Debug(System.String)">
            <summary>
            Logs debug-level information.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Debug(System.Func{System.String})">
            <summary>
            Logs debug-level information.
            </summary>
            <param name="message">Function that generates the log message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.DebugAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Async version of <see cref="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Debug(System.Func{System.String})"/>.
            </summary>
            <param name="message">Message to log.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Info(System.String)">
            <summary>
            Logs info-level information.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Info(System.Func{System.String})">
            <summary>
            Logs info-level information.
            </summary>
            <param name="message">Function that generates the log message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.InfoAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Async version of <see cref="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Info(System.Func{System.String})"/>.
            </summary>
            <param name="message">Function that generates the log message.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Warn(System.String)">
            <summary>
            Logs warning-level information.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Warn(System.Func{System.String})">
            <summary>
            Logs warning-level information.
            </summary>
            <param name="message">Function that generates the log message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.WarnAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Async version of <see cref="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Warn(System.Func{System.String})"/>.
            </summary>
            <param name="message">Function that generates the log message.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Error(System.Exception)">
            <summary>
            Logs error-level information.
            </summary>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Logs error-level information.
            </summary>
            <param name="message">Message to log.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Error(System.Func{System.String},System.Exception)">
            <summary>
            Logs error-level information.
            </summary>
            <param name="message">Function that generates the log message.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.ErrorAsync(System.Func{System.Threading.Tasks.Task{System.String}},System.Exception)">
            <summary>
            Async version of <see cref="M:Stylelabs.M.Sdk.Contracts.Logging.ILogger.Error(System.Func{System.String},System.Exception)"/>.
            </summary>
            <param name="message">Function that generates the log message.</param>
            <param name="exception">The exception that occurred.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Logging.LogEventArgs">
            <summary>
            Event argument when an 'on log' event is fired.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.LogEventArgs.LogLevel">
            <summary>
            Gets or sets the log level of the message.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.LogEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Logging.LogEventArgs.Exception">
            <summary>
            Gets or sets an optional exception instance that was passed
            to the logger through the LogError methods.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Logging.LogLevel">
            <summary>
            Possible values for log levels.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Logging.LogLevel.Debug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Logging.LogLevel.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Logging.LogLevel.Warn">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Logging.LogLevel.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.IMailRequest">
            <summary>
            Interface for e-mail notification requests.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IMailRequest.MailTemplateName">
            <summary>
            Gets or sets the name of the mail template to be used.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IMailRequest.Variables">
            <summary>
            Gets or sets the variables to be applied on the mail template.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailRequest.Validate">
            <summary>
            Validates the mail request.
            </summary>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When the request has invalid properties.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate">
            <summary>
            A strongly typed entity interface for mail templates.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.GetSubject(System.Globalization.CultureInfo)">
            <summary>
            Gets the subject.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The subject.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.SetSubject(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the subject.
            </summary>
            <param name="culture">The culture.</param>
            <param name="subject">The subject.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.GetBody(System.Globalization.CultureInfo)">
            <summary>
            Gets the body.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The body.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.SetBody(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the body.
            </summary>
            <param name="culture">The culture.</param>
            <param name="body">The body.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.GetDescription(System.Globalization.CultureInfo)">
            <summary>
            Gets the description.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The description.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.SetDescription(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="culture">The culture.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="culture"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="culture"/> is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.GetTemplateVariables">
            <summary>
            Gets the template variables.
            </summary>
            <returns>A list of template variables.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IMailTemplate.SetTemplateVariables(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable})">
            <summary>
            Sets the template variables.
            </summary>
            <param name="variables">A collection of template variables.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest">
            <summary>
            Interface for real-time notification requests.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Link">
            <summary>
            Gets or sets the target when the notification is clicked.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.NotificationLevel">
            <summary>
            Gets or sets the notification level.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Options">
            <summary>
            Gets or sets the notification options. This directly maps to the notification API standard used
            by browsers. See https://developer.mozilla.org/en-US/docs/Web/API/notification for more information.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.GetBody">
            <summary>
            Gets the notification body from the <see cref="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Options"/> object.
            </summary>
            <returns>The notification body.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.SetBody(System.String)">
            <summary>
            Sets the notification body on the <see cref="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Options"/> object.
            </summary>
            <param name="body">The notification body.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.GetIcon">
            <summary>
            Gets the notification icon from the <see cref="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Options"/> object.
            </summary>
            <returns>The notification icon.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.SetIcon(System.String)">
            <summary>
            Sets the notification icon on the <see cref="P:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Options"/> object.
            </summary>
            <param name="icon">The notification icon.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRealtimeRequest.Validate">
            <summary>
            Validates the real-time request.
            </summary>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When the request has invalid properties.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.IRequestById">
            <summary>
            Interface for notification requests that target
            users by id.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRequestById.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRequestById.Validate">
            <summary>
            Validates the request.
            </summary>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When the request has invalid properties.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.IRequestByUsername">
            <summary>
            Interface for notification requests that target
            users by username.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.IRequestByUsername.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.IRequestByUsername.Validate">
            <summary>
            Validates the request.
            </summary>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            When the request has invalid properties.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable">
            <summary>
            Model for template variables in e-mail templates.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable"/> class.
            </summary>
            <param name="jObject">The property value.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable"/> class.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.Name">
            <summary>
            Gets or sets name of the variable.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.VariableType">
            <summary>
            Gets or sets type of the variable.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.Templated">
            <summary>
            Gets or sets whether the variable is a template.
            This means that the value is injected by the backend and/or needs formatting.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.Template">
            <summary>
            Gets or sets the template for the variable.
            For <see cref="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.DateTime"/> this can be a formatting,
            or it can be the name of the variable in the backend to be injected.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable.GetJObject">
            <summary>
            Gets the values of this object as an <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType">
            <summary>
            Type options of variables in e-mail template variables.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.Long">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.Html">
            <summary>
            Html.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.DateTime">
            <summary>
            Date time.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.Object">
            <summary>
            Object.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType.Array">
            <summary>
            Array.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Package.IPackageImportRequest">
            <summary>
            Defines a package import request.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Package.IPackageImportRequest.Package">
            <summary>
            Gets or sets the package source.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse">
            <summary>
            Defines a package import response.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.FetchJobId">
            <summary>
            Gets id of the fetch job responsible for uploading the package file.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.ImportJobId">
            <summary>
            Gets id of the package import job
            This field will be populated after waiting for the fetch job to complete with <see cref="M:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.WaitForFetchAsync(System.TimeSpan,System.Nullable{System.TimeSpan})"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.WaitForFetchAsync(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Wait until the fetch job is complete. When done, populates the <see cref="P:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.ImportJobId"/> field unless timeout was reached or the job failed, in which case, an <see cref="T:Stylelabs.M.Sdk.Exceptions.SdkException"/> is thrown.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="pollingInterval">The polling interval.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Package.IPackageImportResponse.WaitForImportAsync(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Wait until the import job completes or throws in case timeout was reached or the job failed.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="pollingInterval">The polling interval.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Package.IPackageSource">
            <summary>
            Defines a package source.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Package.IPackageSource.GetFetchParams">
            <summary>
            Gets the fetch parameters.
            </summary>
            <returns>The parameters.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.ICondition">
            <summary>
            Interface for conditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.ICondition.EntityIds">
            <summary>
            Gets the condition is met for entities that are direct or indirect
            descendants of the entities with the specified links.
            The entities are combined using the "OR" operator.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.ICondition.DirectEntityIds">
            <summary>
            Gets the condition is met for entities that are direct descendants
            of the entities with the specified links.
            The entities are combined using the "OR" operator.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy">
            <summary>
            Interface for member policies.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.DefinitionName">
            <summary>
            Gets or sets the name of the definition that
            contains the <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.Target"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.Target">
            <summary>
            Gets or sets the member on the definition where the
            <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.CanRead"/> and <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.CanWrite"/> properties apply on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.CanRead">
            <summary>
            Gets or sets a value indicating whether gets or sets whether the user/user group that has this policy
            can read the <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.Target"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.CanWrite">
            <summary>
            Gets or sets a value indicating whether gets or sets whether the user/user group that has this policy
            can write to the <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IMemberPolicy.Target"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.IPolicy">
            <summary>
            Describes a policy.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IPolicy.Rules">
            <summary>
            Gets a list of rules (never <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IPolicy.MemberSecurity">
            <summary>
            Gets a list of member policies (never <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IPolicy.MemberGroupSecurity">
            <summary>
            Gets a list of member group policies (never <see langword="null"/>).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Policies.IPolicy.GetRelatedId">
            <summary>
            Gets the id of entity this policy applies to. This depends on the implementation.
            E.g. for <see cref="T:Stylelabs.M.Sdk.Contracts.Policies.IUserPolicy"/> it will return <see cref="P:Stylelabs.M.Sdk.Contracts.Policies.IUserPolicy.UserId"/>.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.IRule">
            <summary>
            Describes a rule.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.DefinitionNames">
            <summary>
            Gets non <see langword="null"/> collection entity definition resource
            links which define the entity definitions to which this policy applies.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.Identifier">
            <summary>
            Gets unique identifier of the rule, usually GUID string.
            This identifier is automatically generated by the system.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.Conditions">
            <summary>
            Gets non <see langword="null"/> collection of conditions which needs
            to be fulfilled uniformly in order to trigger this rule
            (i.e. conditions are combined with "AND" logical operator).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.Permissions">
            <summary>
            Gets non <see langword="null"/> collection of permissions this rule grands,
            the permissions are simple string constants recognized by the system.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.CreatedByLoggedOnUser">
            <summary>
            Gets or sets a value indicating whether if set to <see langword="true"/>, this rule only applies
            to entities created by the logged on user.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.Type">
            <summary>
            Gets or sets the type of the rule. Indicates if this object is owned by the system and cannot be updated by users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IRule.IsSystemOwned">
            <summary>
            Gets or sets a value indicating whether indicates if this object is owned by the system and cannot be updated by users.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.IUserGroupPolicy">
            <summary>
            Describes a policy for user groups.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IUserGroupPolicy.UserGroupId">
            <summary>
            Gets the id of the user group.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.IUserPolicy">
            <summary>
            Describes a policy for users.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Policies.IUserPolicy.UserId">
            <summary>
            Gets the id of the user.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Policies.RuleType">
            <summary>
            Type of rules.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Policies.RuleType.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Policies.RuleType.BuiltIn">
            <summary>
            Built in.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Processing.IFile">
            <summary>
            Describes an M.File entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Processing.IFile.Filename">
            <summary>
            Gets or sets the filename, including extension.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Processing.IFile.Extension">
            <summary>
            Gets the file extension, including the dot.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.Generic.IQueryIterator`1">
            <summary>
            Base interface for iterating over query results.
            </summary>
            <typeparam name="T"> A subtype of <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IQueryResult"/>.</typeparam>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.Generic.IQueryIterator`1.Current">
            <summary>
            Gets get the current result during iteration.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.Generic.IQueryResult`1">
            <summary>
            Generic base interface for results returned using querying.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.Generic.IQueryResult`1.Items">
            <summary>
            Gets the results that matched the query. This property only contains
            the results for the requested page. There may be more results available.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.Generic.IScroller`1">
            <summary>
            Interface for generic scrollers.
            </summary>
            <typeparam name="T">Type of scroll result.</typeparam>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.Generic.IScroller`1.Current">
            <summary>
            Gets the current result during scrolling.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.Generic.IScrollResult`1">
            <summary>
            Describes a generic scroll result.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.Generic.IScrollResult`1.Items">
            <summary>
            Gets the results that matched the query. This property only contains
            the results for the requested page. There may be more results available.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionIterator">
            <summary>
            An iterator for iterating over <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>
            query results.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionQueryResult">
            <summary>
            A query result containing <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>s.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionQueryResult.CreateIterator">
            <summary>
            Creates an iterator you can easily iterate over the query results.
            The iterator can go back and forth all pages/batches of the query result.
            </summary>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionIterator"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator">
            <summary>
            An iterator for iterating over <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>
            query results.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult">
            <summary>
            A query result containing <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>s.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult.CreateIterator">
            <summary>
            Creates an iterator to iterate over the query results.
            The iterator can go back and forth all pages/batches of the query result.
            </summary>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScroller">
            <summary>
            Describes a scroller that returns entities.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScrollResult">
            <summary>
            Describes a scroll result containing entities.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IIdIterator">
            <summary>
            Describes an iterator that returns ids.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult">
            <summary>
            A query result containing entity ids.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult.CreateIterator">
            <summary>
            Creates an iterator to iterate over the query results.
            The iterator can go back and forth all pages/batches of the query result.
            </summary>
            <returns>A <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdIterator"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScroller">
            <summary>
            Describes a scroll that returns ids.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScrollResult">
            <summary>
            Describes a scroll result containing ids.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IQueryResult">
            <summary>
            Non generic base interface for all query results.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.IQueryResult.Items">
            <summary>
            Gets the results that matched the query. This property only contains
            the results for the requested page. There may be more results available.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.IQueryResult.TotalNumberOfResults">
            <summary>
            Gets the total number of items that match the given query.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.IQueryResult.Offset">
            <summary>
            Gets or sets describes the start of this page.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine`1">
            <summary>
            Engine for scrolling.
            </summary>
            <typeparam name="T">The type of the scroll engine.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine`1.StartScrollAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration)">
            <summary>
            Does the initial setup of the scroll and returns the first batch.
            </summary>
            <param name="query">The query used for scrolling.</param>
            <param name="queryLoadConfiguration">The load configuration.</param>
            <returns>The scroll result.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine`1.ContinueScrollAsync(System.String,System.TimeSpan,Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration,System.Int64)">
            <summary>
            Continues scrolling though an existing scroll.
            </summary>
            <param name="scrollId">Id of the scroll.</param>
            <param name="scrollTime">The time to keep the scroll alive between requests.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="offset">The current offset.</param>
            <returns>The scroll result.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IScroller">
            <summary>
            Allows scrolling (similar to iterating) over a <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.IScroller.Current">
            <summary>
            Gets the current result. This is initially <see langword="null"/>.
            Use <see cref="M:Stylelabs.M.Sdk.Contracts.Querying.IScroller.MoveNextAsync"/> first.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IScroller.CanMoveNext">
            <summary>
            Checks if the iterator can move further through the results.
            </summary>
            <returns><see langword="true"/> if there more results.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IScroller.MoveNextAsync">
            <summary>
            Advances the scroller to the next batch of the collection.
            The result will be available in <see cref="P:Stylelabs.M.Sdk.Contracts.Querying.IScroller.Current"/>.
            </summary>
            <returns>
            <see langword="true"/> if the scroller was successfully advanced to the next batch.
            <see langword="false"/> if the scroller has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Querying.IScroller.Reset">
            <summary>
            Resets the scroller to start before the first result again.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Querying.IScrollResult">
            <summary>
            A scroll result.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Querying.IScrollResult.ScrollId">
            <summary>
            Gets last id of the scroll (can be different from last scroll).
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Settings.ISetting">
            <summary>
            Represents a setting entity in Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Settings.ISetting.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Settings.ISetting.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Settings.ISetting.Schema">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Settings.ISetting.GetLabel(System.Globalization.CultureInfo)">
            <summary>
            Gets a label.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Settings.ISetting.SetLabel(System.String,System.Globalization.CultureInfo)">
            <summary>
            Sets a label.
            </summary>
            <param name="label">The label.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Users.IUser">
            <summary>
            Represents an user in Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUser.Username">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUser.UserGroupConfiguration">
            <summary>
            Gets or sets the user group configuration.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Users.IUser.GetUserProfileAsync(Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets a user profile.
            </summary>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>A <see cref="T:Stylelabs.M.Sdk.Contracts.Users.IUserProfile"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Users.IUser.GetUserGroupIdsAsync">
            <summary>
            Gets user group ids.
            </summary>
            <returns>The list of ids.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Users.IUser.GetUserPolicyAsync">
            <summary>
            Gets an user policy.
            </summary>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Policies.IUserPolicy"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Users.IUserGroup">
            <summary>
            Represents an user group in Content Hub.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Contracts.Users.IUserGroup.GetUserGroupPolicyAsync">
            <summary>
            Gets an user group policy.
            </summary>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Policies.IUserGroupPolicy"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Users.IUserGroupConfiguration">
            <summary>
            Represents an user group configuration.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUserGroupConfiguration.CombineMethod">
            <summary>
            Gets or sets the combine methods.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUserGroupConfiguration.UserGroupIds">
            <summary>
            Gets the user group ids.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUserGroupConfiguration.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Users.IUserProfile">
            <summary>
            Represents an user profile.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Contracts.Users.IUserProfile.Username">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Contracts.Users.UserGroupCombineMethod">
            <summary>
            User group combine method.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Users.UserGroupCombineMethod.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Contracts.Users.UserGroupCombineMethod.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Defaults">
            <summary>
            Contains default values for all SDK implementations.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Errors">
            <summary>
            Contains all error messages for all SDK implementations.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.AuthenticationException">
            <summary>
            Exception for when authentication failed.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.AuthenticationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.AuthenticationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.AuthenticationException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">
            <summary>
            The exception that is thrown when doing an action that is forbidden.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ForbiddenException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ForbiddenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ForbiddenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ForbiddenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            <summary>
            The exception that is thrown when an internal problem was detected.
            This should never be thrown, and most likely means there's a bug.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.InternalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.InternalException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.InternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.InternalException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.InternalException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.InternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.InternalException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">
            <summary>
            The exception that is thrown when a resource could not be found.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.NotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.PermissionException">
            <summary>
            The exception that is thrown when permission problems were encountered.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PermissionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PermissionException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PermissionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PermissionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PermissionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PermissionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PermissionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PermissionException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException">
            <summary>
            Exception for when a property was required, but not found.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.PropertyNotFoundException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.ScriptException">
            <summary>
            Exception related to an unsuccessful execution of Sitecore Content Hub scripts.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ScriptException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ScriptException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ScriptException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ScriptException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ScriptException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ScriptException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.SdkException">
            <summary>
            Base class for all SDK exceptions.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.SdkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.SdkException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.SdkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.SdkException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.SdkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.SdkException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.SdkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.SdkException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.ValidationException">
            <summary>
            The exception that is thrown when validation problems were detected during persisting.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.String,Stylelabs.M.Sdk.Exceptions.ValidationFailure)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="failure">The <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Exceptions.ValidationFailure})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="failures">Collection of <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Exceptions.ValidationFailure},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="failures">Collection of <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure"/>.</param>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationException"/> class.
            </summary>
            <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Exceptions.ValidationException.Failures">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure">
            <summary>
            Describes a validation failure.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationFailure.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.ValidationFailure"/> class.
            </summary>
            <param name="source">The item that is invalid.</param>
            <param name="message">A description of why the item is invalid.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Exceptions.ValidationFailure.Source">
            <summary>
            Gets the item that is invalid, e.g. a property or relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Exceptions.ValidationFailure.Message">
            <summary>
            Gets a description of why the item is invalid.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.ValidationFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Exceptions.WebApiException">
            <summary>
            Exception thrown when something goes wrong executing a web request.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Exceptions.WebApiException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Exceptions.WebApiException"/> class.
            </summary>
            <param name="message">The message describing the exception.</param>
            <param name="statusCode">The status code returned by the server.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Exceptions.WebApiException.StatusCode">
            <summary>
            Gets the status code returned by the server.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Extensions.IAssetEntityExtensions">
            <summary>
            Extension methods for <see cref="T:Stylelabs.M.Sdk.Models.Typed.IAssetEntity"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.IAssetEntityExtensions.GetFinalLifeCycleStatus(Stylelabs.M.Sdk.Models.Typed.IAssetEntity)">
            <summary>
            Gets the <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/>.
            </summary>
            <param name="asset">The <see cref="T:Stylelabs.M.Sdk.Models.Typed.IAssetEntity"/>.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/> for an <see cref="T:Stylelabs.M.Sdk.Contracts.Content.IAsset"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Extensions.MailTemplateEntityExtensions">
            <summary>
            Extension class for <see cref="T:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.MailTemplateEntityExtensions.GetTemplateVariables(Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity)">
            <summary>
            Gets the variables.
            </summary>
            <param name="mailTemplate">The <see cref="T:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity"/>.</param>
            <returns>The list of variables.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.MailTemplateEntityExtensions.SetTemplateVariables(Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable})">
            <summary>
            Sets the variables.
            </summary>
            <param name="mailTemplate">The <see cref="T:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity"/>.</param>
            <param name="variables">The list of variables.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Extensions.PropertyInfoExtensions">
            <summary>
            Property info extensions.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Extensions.QueryExtensions">
            <summary>
            Extensions for <see cref="T:Stylelabs.M.Base.Querying.Query"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.QueryExtensions.Copy(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Creates a shallow copy of a query.
            </summary>
            <param name="query">The query to copy.</param>
            <returns>A shallow copy of the query.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.QueryExtensions.MakeSureEntitiesAreLoaded(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Makes sure that the query is configured to load entities.
            If it isn't the case, it will reset to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Default"/>.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.QueryExtensions.MakeSureOnlyIdsAreLoaded(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Makes sure that the query is configured to load ids.
            If it isn't the case, it will reset to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Ids"/>.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.QueryExtensions.Validate(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Validates that the query object is valid.
            Otherwise it will throw.
            </summary>
            <param name="query">The query.</param>
            <exception cref="T:System.ArgumentException">
            When the query object is not valid.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Extensions.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts a string to camel case.
            </summary>
            <param name="str">The string.</param>
            <returns>The string as camel case.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Factories.IDataSourceFactory">
            <summary>
            Describes a factory to create datasources.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IDataSourceFactory.CreateFlatDataSource(System.String)">
            <summary>
            Creates a new flat data source instance with the specified name.
            </summary>
            <param name="name">Name of the data source.</param>
            <returns>A new flat data source instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be an empty or whitespace string.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IDataSourceFactory.CreateHierarchicalDataSource(System.String)">
            <summary>
            Creates a new hierarchical data source instance with the specified name.
            </summary>
            <param name="name">Name of the data source.</param>
            <returns>A new hierarchical data source instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be an empty or whitespace string.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Factories.IEntityFactory">
            <summary>
            Contains functionality to create <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IEntityFactory.CreateAsync(System.String,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance of the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>
            corresponding to the <paramref name="definitionName"/>.
            </summary>
            <param name="definitionName">The entity definition name (case insensitive).</param>
            <param name="cultureLoadOption">The culture load option.</param>
            <returns>A new <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="definitionName"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="definitionName"/> cannot be an empty or whitespace string.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IEntityFactory.CreateAsync(Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <summary>
            Creates an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance of the given <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
            <param name="definition">The entity definition.</param>
            <param name="cultureLoadOption">The culture load option.</param>
            <returns>A new <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="definition"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Factories.IRelationFactory">
            <summary>
            Factory for <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>s.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateChildToManyParentsRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IChildToManyParentsRelation"/>.
            </summary>
            <param name="definition">The relation definition.</param>
            <returns>A new relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateChildToOneParentRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IChildToOneParentRelation"/>.
            </summary>
            <param name="definition">The relation definition.</param>
            <returns>A new relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateParentToManyChildrenRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IParentToManyChildrenRelation"/>.
            </summary>
            <param name="definition">The relation definition.</param>
            <returns>A new relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateParentToOneChildRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IParentToOneChildRelation"/>.
            </summary>
            <param name="definition">The relation definition.</param>
            <returns>A new relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>.
            </summary>
            <param name="definition">The relation definition.</param>
            <returns>A new relation.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.IRelationFactory.CreateRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition})">
            <summary>
            Creates a new collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>s.
            </summary>
            <param name="definitions">The relation definitions.</param>
            <returns>A collection of relations.</returns>
            <exception cref="T:System.ArgumentNullException">
            When one or more values are null in <paramref name="definitions"/>.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Factories.ITypedEntityFactory">
            <summary>
            Defines the typed entity factory.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.ITypedEntityFactory.FromEntity``1(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Maps an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> to a typed entity.
            </summary>
            <param name="entity">The entity to map.</param>
            <typeparam name="T">The typed entity type.</typeparam>
            <returns>The typed entity.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.ITypedEntityFactory.CreateEntity(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Creates a typed entity.
            </summary>
            <param name="args">The entity construction arguments.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Factories.TypedEntityFactoryBase">
            <summary>
            Base implementation of <see cref="T:Stylelabs.M.Sdk.Factories.ITypedEntityFactory"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.TypedEntityFactoryBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Factories.TypedEntityFactoryBase"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.TypedEntityFactoryBase.FromEntity``1(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Maps an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> to a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.
            </summary>
            <param name="entity">The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.</param>
            <typeparam name="T">The type of the typed entity.</typeparam>
            <returns>An entity of the specified type.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Factories.TypedEntityFactoryBase.CreateEntity(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.IMClient">
            <summary>
            Client for the Marketing Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Logger">
            <summary>
            Gets or sets the logger.
            Contains functionality to log messages.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Commands">
            <summary>
            Gets the commands client.
            Contains functionality to execute commands in M.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Cultures">
            <summary>
            Gets the culture client.
            Allows fetching culture information from M.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.DataSources">
            <summary>
            Gets the data source client.
            Contains functionality to query, create and manipulate <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>s.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Entities">
            <summary>
            Gets the entities client.
            Contains functionality to query, create and manipulate <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.EntityDefinitions">
            <summary>
            Gets the entity definitions client.
            Contains functionality to query, create and manipulate
            <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>s.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Jobs">
            <summary>
            Gets the jobs client.
            Contains functionality to create jobs.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Notifications">
            <summary>
            Gets the notifications client.
            Contains functionality to manage and send notifications.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Policies">
            <summary>
            Gets the policies client.
            Contains functionality to get and update
            <see cref="T:Stylelabs.M.Sdk.Contracts.Policies.IPolicy"/> objects.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Querying">
            <summary>
            Gets the querying client.
            Contains functionality to query and scroll for <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Scripts">
            <summary>
            Gets the scripts client.
            Contains functionality to execute scripts.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Settings">
            <summary>
            Gets the settings client.
            Contains functionality to get setting entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Translations">
            <summary>
            Gets the translations client.
            Contains functionality to manage translations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Users">
            <summary>
            Gets the users client.
            Contains functionality to get and interact with user entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Assets">
            <summary>
            Gets the Assets client.
            Contains functionality for asset operations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.Permissions">
            <summary>
            Gets the permissions client.
            Contains functionality to get entity permissions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.DataSourceFactory">
            <summary>
            Gets the data source factory.
            Contains functionality to create <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/>s.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.EntityFactory">
            <summary>
            Gets the entity factory.
            Contains functionality to create <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.IMClient.TypedEntityFactory">
            <summary>
            Gets the typed entity factory.
            Contains functionality to create typed <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> instances.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.IMClient.ImpersonateAsync(System.String)">
            <summary>
            Creates a new <see cref="T:Stylelabs.M.Sdk.IMClient"/> that acts on behalf of the user with the specified <paramref name="username"/>.
            The current logger will be copied to the new client.
            </summary>
            <param name="username">The username of the user to impersonate.</param>
            <returns>A new client bound to specified user.</returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="username"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="username"/> contains only whitespaces.</exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.ForbiddenException">When the current user is not allowed to impersonate other users.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.CultureLoadOptionMapper">
            <summary>
            Culture load option mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.CultureLoadOptionMapper.ToCultureArrayAsync(Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption,Stylelabs.M.Sdk.Utilities.ICultureLoader)">
            <summary>
            Maps from a <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption"/> to an array of <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="options">The load options.</param>
            <param name="loader">The culture loader.</param>
            <returns>An array of <see cref="T:System.Globalization.CultureInfo"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.FinalLifeCycleStatusMapper">
            <summary>
            Final life cycle status mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.FinalLifeCycleStatusMapper.Map(System.String)">
            <summary>
            Maps a string to a <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/>.
            </summary>
            <param name="status">The status.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/>.</returns>
            <exception cref="T:System.ArgumentException">If the status could not be mapped.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.FinalLifeCycleStatusMapper.Map(System.Nullable{Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus})">
            <summary>
            Maps a <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/> to a string.
            </summary>
            <param name="status">The <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/>.</param>
            <returns>The status.</returns>
            <exception cref="T:System.ArgumentException">If the <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/> could not be mapped.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.MappingUtilities">
            <summary>
            Provides some utilities for mapping.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.ToNullableDate(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a nullable <see cref="T:System.DateTime"/>.
            <see cref="F:System.DateTime.MinValue"/> will be mapped to <see langword="null"/>.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
            <returns>A nullable <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.NullableToDate(System.Nullable{System.DateTime})">
            <summary>
            Coverts a nullable <see cref="T:System.DateTime"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">The nullable <see cref="T:System.DateTime"/>.</param>
            <returns>The <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.ToNullableId(System.Int64)">
            <summary>
            Converts an id to a nullable id.
            0 will be mapped to <see langword="null"/>.
            </summary>
            <param name="id">An id.</param>
            <returns>A nullable <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.NullableToId(System.Nullable{System.Int64})">
            <summary>
            Converts a nullable id to an id.
            </summary>
            <param name="id">An id.</param>
            <returns>A <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.GetCulturesWithoutInvariant(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Filters a list of <see cref="T:System.Globalization.CultureInfo"/> by excluding <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="cultures">The cultures.</param>
            <returns>The filtered cultures.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.AddInvariantIfEmpty(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Adds <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to a list of <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="cultures">The cultures.</param>
            <returns>The extended list of <see cref="T:System.Globalization.CultureInfo"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.SdkCulturesToLoadOption(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Creates a load option for the passed cultures, but does not check for invariant culture.
            </summary>
            <param name="cultures">The cultures.</param>
            <returns>The <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.MapLabels(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Maps labels to cultures.
            </summary>
            <param name="dict">The labels.</param>
            <returns>The cultures.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.MappingUtilities.MapLabels(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String})">
            <summary>
            Maps cultures to labels.
            </summary>
            <param name="dict">The cultures.</param>
            <returns>The labels.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.NotificationMapper">
            <summary>
            Notification mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.NotificationMapper.MapParameters(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest)">
            <summary>
            Maps parameters.
            </summary>
            <param name="request">The <see cref="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest"/> to map.</param>
            <returns>The mapped <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.QueryLoadConfigurationMapper">
            <summary>
            Query load configuration mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.QueryLoadConfigurationMapper.ToEntityLoadConfiguration(Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration)">
            <summary>
            Maps an <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/> into a <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/>.
            </summary>
            <param name="configuration">The configuration to map.</param>
            <returns>The mapped configuration.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Mappers.TemplateVariableTypeMapper">
            <summary>
            Template variable type mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.TemplateVariableTypeMapper.Map(System.String)">
            <summary>
            Maps a string to a <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType"/>.
            </summary>
            <param name="type">The string type to map.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType"/>.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">If the string could be map.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Mappers.TemplateVariableTypeMapper.Map(System.Nullable{Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType})">
            <summary>
            Maps a <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType"/> to a string.
            </summary>
            <param name="type">The <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType"/> to map.</param>
            <returns>A string.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">If the <see cref="T:Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariableType"/> could be mapped.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.ChildRelationBase">
            <summary>
            Base class for child relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.ChildRelationBase.#ctor(System.String,System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.ChildRelationBase"/> class.
            </summary>
            <param name="name">The name of the relation.</param>
            <param name="properties">The properties of the linked entity.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.ChildRelationBase.#ctor(Stylelabs.M.Sdk.IMClient,System.String,System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.ChildRelationBase"/> class.
            </summary>
            <param name="client">The <seealso cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="name">The name of the relation.</param>
            <param name="properties">The properties of the linked entity.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.ChildRelationBase.InheritsSecurity">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty">
            <summary>
            A culture sensitive property.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.GetValue``1">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.SetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.StartTracking">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.MarkClean">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureInsensitiveProperty.GetTypeName">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty">
            <summary>
            A culture sensitive property.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.#ctor(System.String,System.Type,System.Collections.Generic.ISet{System.Globalization.CultureInfo},System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the property.</param>
            <param name="loadedCultures">The cultures to load.</param>
            <param name="values">The values of the property.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.#ctor(System.String,System.Type,System.Collections.Generic.ISet{System.Globalization.CultureInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the property.</param>
            <param name="loadedCultures">The cultures to load.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.IsDirty">
            <summary>
            Gets a value indicating whether the property is dirty or not.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetValue(System.Globalization.CultureInfo)">
            <summary>
            Gets a value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetValue``1(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetValues``1">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetValues``1(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.SetValue(System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetValues">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetCultures">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetDirtyCultures">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.StartTracking">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.MarkClean">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.CultureSensitiveProperty.GetTypeName">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase">
            <summary>
            Base class for data source.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.CreatedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.CreatedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.ModifiedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.ModifiedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.Labels">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.Type">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceBase.GetDataSourceValues">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/> class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/> class.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="labels">The labels.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase.Labels">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSource">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSource.#ctor(System.String)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSource.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String},System.Collections.Generic.IList{Stylelabs.M.Sdk.Contracts.Base.IFlatDataSourceValue})">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSource.Type">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSourceValue">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSourceValue.#ctor(System.String)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.FlatDataSourceValue.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String})">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1">
            <summary>
            A base class for data sources.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/> class.
            </summary>
            <param name="name">The name of the data source.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/> class.
            </summary>
            <param name="name">The name of the data source.</param>
            <param name="labels">The labels for the data source.</param>
            <param name="values">The values for the data source.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1.Values">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1.GetDataSourceValues">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSource">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSource.#ctor(System.String)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSource.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String},System.Collections.Generic.IList{Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSourceValue})">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSource.Type">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.Generic.DataSourceBase`1"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSourceValue">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSourceValue.#ctor(System.String)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSourceValue.#ctor(System.String,System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.String},System.Collections.Generic.IList{Stylelabs.M.Sdk.Contracts.Base.IHierarchicalDataSourceValue})">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.DataSources.HierarchicalDataSourceValue.Values">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Base.DataSources.DataSourceValueBase"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.EntityBase">
            <summary>
            A base class for entities.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.EntityBase"/> class.
            </summary>
            <param name="client">Client.</param>
            <param name="args">Aggregate of construction parameters.</param>
            <exception cref="T:System.ArgumentNullException">
            Cannot be or contain <see langword="null"/>:
            <paramref name="client"/>, <paramref>
                <name>cultures</name>
            </paramref>
            ,
            <paramref>
                <name>properties</name>
            </paramref>
            , <paramref>
                <name>relations</name>
            </paramref>
            .
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref>
                <name>cultures</name>
            </paramref>
                cannot contain <see langword="null"/>
            or <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Id">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.CreatedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.ModifiedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.LockedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.DefinitionName">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.CreatedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.ModifiedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.LockedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsRootTaxonomyItem">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsPathRoot">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.InheritsSecurity">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Version">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Cultures">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Relations">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Renditions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.RelatedPaths">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsTracking">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsNew">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.IsDirty">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityBase.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValueAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValueAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValue(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValue``1(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValueAsync(System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <summary>
            Gets a property value.
            </summary>
            <param name="name">The property name.</param>
            <param name="culture">The culture.</param>
            <param name="loadOption">The load option.</param>
            <returns>The property value.</returns>
            <exception cref="T:System.InvalidOperationException"> if property is not multi-language.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPropertyValueAsync``1(System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.SetPropertyValue(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.SetPropertyValue(System.String,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetRelation``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetRelationAsync(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole},Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetRelationAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetRendition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetPermissionsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.GetEntityDefinitionAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.CanDoLazyLoading">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.LoadPropertiesAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.LoadRelationsAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.LoadMembersAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.StartTracking">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityBase.MarkClean">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs">
            <summary>
            Defines the entity construction args.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs"/> class.
            </summary>
            <param name="definitionName">The name of the definition.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.DefinitionName">
            <summary>
            Gets or sets the name of the definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Properties">
            <summary>
            Gets or sets properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Relations">
            <summary>
            Gets or sets relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Cultures">
            <summary>
            Gets or sets cultures.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.Renditions">
            <summary>
            Gets or sets renditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs.RelatedPaths">
            <summary>
            Gets or sets related paths.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.EntityDefinition">
            <summary>
            An entity definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.Id">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.IsNew">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.ModifiedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.ModifiedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.CreatedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.CreatedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.DisplayTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.IsTaxonomyItemDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.IsPathEnabledDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.IsManualSortingAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.Labels">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.EntityDefinition.MemberGroups">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityDefinition.GetPropertyDefinition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityDefinition.GetPropertyDefinition``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityDefinition.GetPropertyDefinitions">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityDefinition.GetRelationDefinition(System.String,Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.EntityDefinition.GetRelationDefinitions">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.LazyLoadingManager">
            <summary>
            Lazy loading manager.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.LazyLoadingManager.EnsureLazyLoadingIsPossible(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Throws if lazy loading is not possible.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberBase">
            <summary>
            Base class for member.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberBase.IsTracking">
            <summary>
            Gets or sets a value indicating whether tracking is enable.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberBase.DefinitionType">
            <summary>
            Gets the definition type.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberBase.IsDirty">
            <summary>
            Gets a value indicating whether  is dirty or not.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.MemberBase.StartTracking">
            <summary>
            Starts tracking.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.MemberBase.MarkClean">
            <summary>
            Marks as clean.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberConditions.BoolMemberCondition">
            <summary>
            Condition triggered on value change of a BoolPropertyDefinition member.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberConditions.BoolMemberCondition.Value">
            <summary>
            Gets or sets a value indicating whether the value.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberConditions.MemberConditionBase">
            <summary>
            Base class for member conditions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberConditions.MemberConditionBase.MemberName">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberConditions.NoAncestorMemberCondition">
            <summary>
            Condition triggered when the relation does not have ancestor
            of the given definition id.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberConditions.NoAncestorMemberCondition.DefinitionId">
            <summary>
            Gets or sets id of the linked <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberConditions.RelationMemberCondition">
            <summary>
            Condition triggered on the ancestor id of the relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberConditions.RelationMemberCondition.EntityId">
            <summary>
            Gets or sets id of the entity.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberConditions.StringMemberCondition">
            <summary>
            Condition triggered on the value of the property member.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberConditions.StringMemberCondition.Value">
            <summary>
            Gets or sets non <see langword="null"/> case insensitive and culture
            agnostic value which is compared against entity property value.
            </summary>
            <remarks>
            Note that the value equal to <see cref="F:System.String.Empty"/>
            is treated as unspecified value not triggering the condition.
            </remarks>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase">
            <summary>
            Base class for member definitions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.DefinitionType">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.HelpText">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.IsConditional">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.Conditions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.IsSecured">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberDefinitionBase.AllowUpdates">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.MemberGroup">
            <summary>
            A member group.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.ContentGroup">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.Labels">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.MemberDefinitions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.IsConditional">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.Conditions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.MemberGroup.IsSecured">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyBase">
            <summary>
            Base implementation of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IProperty"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyBase.#ctor(System.String,System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.PropertyBase"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="isMultilingual">Indicates if the property is multi-value.</param>
            <param name="type">The type of the property.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyBase.IsMultiLanguage">
            <summary>
            Gets a value indicating whether the property is multi-value or not.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyBase.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyBase.DefinitionType">
            <summary>
            Gets the definition type.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyBase.DebuggerDisplay">
            <summary>
            Gets the debugger display.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyBase.GetTypeName">
            <summary>
            Gets the type name of the subtype.
            </summary>
            <returns>Name of the subtype.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.BooleanPropertyDefinition">
            <summary>
            A <see cref="T:System.Boolean"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.BooleanPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DateTimeOffsetPropertyDefinition">
            <summary>
            A <see cref="T:System.DateTimeOffset"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DateTimeOffsetPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DateTimePropertyDefinition">
            <summary>
            A <see cref="T:System.DateTime"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DateTimePropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DecimalPropertyDefinition">
            <summary>
            A <see cref="T:System.Decimal"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.DecimalPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.IntegerPropertyDefinition">
            <summary>
            A <see cref="T:System.Int32"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.IntegerPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.JsonPropertyDefinition">
            <summary>
            A JSON (<see cref="T:Newtonsoft.Json.Linq.JToken"/>) property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.JsonPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.LongPropertyDefinition">
            <summary>
            A <see cref="T:System.Int64"/> property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.LongPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase">
            <summary>
            A base class for all property definitions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.DefinitionType">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.Indexed">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IsMandatory">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IsMultiLanguage">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IsMultiValue">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IsUnique">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.Boost">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IncludedInContent">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.IncludedInCompletion">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.PropertyDefinitionBase.DataType">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.StringPropertyDefinition">
            <summary>
            A string property definition.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.StringPropertyDefinition.DataType">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.StringPropertyDefinition.ContentType">
            <summary>
            Gets or sets describes the content should be displayed.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.StringPropertyDefinition.ValidationExpression">
            <summary>
            Gets or sets a regular expression that must match the value
            of the property. If set to <see langword="null"/>
            the value is not checked.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.PropertyDefinitions.StringPropertyDefinition.DataSourceName">
            <summary>
            Gets or sets the name of the <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IDataSource"/> to get possible values from.
            Is <see langword="null"/> when there is no attached datasource.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.PropertyManager">
            <summary>
            Manages the getting, setting and lazy loading of properties.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.GetProperty(System.String)">
            <summary>
            Gets a property by name. If it is not loaded,
            <see langword="null"/> will be returned.
            </summary>
            <param name="propertyName">Name of the property (case insensitive).</param>
            <returns>The property or <see langword="null"/> if it wasn't loaded.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.GetProperties">
            <summary>
            Gets a list of all loaded properties.
            </summary>
            <returns>List of all loaded properties.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.Count">
            <summary>
            Gets the count of all loaded properties.
            </summary>
            <returns>The count.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.LoadPropertyAsync(System.String)">
            <summary>
            Lazy loads a property if it is not loaded yet, adds it to the loaded properties and returns it.
            If the property does not exist, <see langword="null"/> will be returned.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IProperty"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="propertyName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="propertyName"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If lazy loading is not possible.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.LoadPropertiesAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <summary>
            Loads the specified properties.
            It will only load if it is actually missing properties and does not overwrite existing properties.
            </summary>
            <param name="propertyLoadOption">Properties to load.</param>
            <returns><see langword="true"/> if new properties were added.</returns>
            <remarks>
            Culture sensitive properties will only be loaded in the current cultures.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            When lazy loading is not possible.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="propertyLoadOption"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.HasMissingProperties(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <summary>
            Checks if the entity is missing properties that are specified
            in <paramref name="propertyLoadOption"/>.
            </summary>
            <param name="propertyLoadOption">The load option.</param>
            <returns><see langword="true"/> if there are missing properties, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.ImportMissingProperties(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Adds missing properties from <paramref name="entity"/>
            to the properties.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.PropertyManager.FetchPropertyAsync(System.String)">
            <summary>
            Fetches the property in the entity's culture from the server.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>An <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IProperty"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.RelationBase">
            <summary>
            Base class for relations.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.#ctor(System.String,System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.RelationBase"/> class.
            </summary>
            <param name="name">The name of the relation.</param>
            <param name="properties">The properties of the linked entity.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.#ctor(Stylelabs.M.Sdk.IMClient,System.String,System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.RelationBase"/> class.
            </summary>
            <param name="client">The <seealso cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="name">The name of the relation.</param>
            <param name="properties">The properties of the linked entity.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationBase.DefinitionType">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationBase.Role">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationBase.Properties">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationBase.DebuggerDisplay">
            <summary>
            Gets the debugger display.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.GetIds">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.SetIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.SetIdentifiersAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationBase.GetTypeName">
            <summary>
            Gets the name of the relation type.
            </summary>
            <returns>The name of the type.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.RelationContainer">
             <summary>
             This class helps with resolving relations. In particular for managing self-referencing
             relations. The advantage of bundling relations by name is:
            
             * We can do fast lookups for the container by relation name and at maximum get 1 instance.
             * For consistency, any time a self-referencing relation is requested, without specifying the role,
             it will throw.
             </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.RelationContainer"/> class.
            </summary>
            <param name="relationName">The name of the relation.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationContainer.RelationName">
            <summary>
            Gets the name of the relations contained in this container.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationContainer.ParentRelation">
            <summary>
            Gets the parent relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationContainer.ChildRelation">
            <summary>
            Gets the child relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.GetRelation">
            <summary>
            Gets the relation. If the relation is self-referencing, it will throw.
            Returns <see langword="null"/> if there are no loaded relations.
            </summary>
            <returns>The relation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Relation is self-referencing.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.GetRelation(System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Gets the relation. If <paramref name="role"/> is <see langword="null"/>
            and the relation is self-referencing, it will throw.
            Returns <see langword="null"/> if there are no loaded relations.
            </summary>
            <param name="role">The role of the relation.</param>
            <returns>The relation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Relation is self-referencing and <paramref name="role"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.GetRelation(Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole)">
            <summary>
            Gets the relation by role.
            Returns <see langword="null"/> if it is not loaded.
            </summary>
            <param name="role">The role of the relation.</param>
            <returns>The relation.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Unknown <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.GetRelations">
            <summary>
            Gets an array of all loaded relations.
            </summary>
            <returns>A collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.RelationExists(Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole)">
            <summary>
            Checks if the relation with specified role is loaded.
            </summary>
            <param name="role">The relation role.</param>
            <returns>Whether the relation exists or not.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.SetRelation(Stylelabs.M.Sdk.Contracts.Base.IRelation)">
            <summary>
            Sets the relation on this container.
            </summary>
            <param name="relation">The relation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="relation"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Relation name does not match container name.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Unknown <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.Any">
            <summary>
            Checks if this contains any relation.
            </summary>
            <returns>Whether or not there are any relations.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationContainer.IsSelfReferencing">
            <summary>
            Checks if the relation is self-referencing.
            </summary>
            <returns>Whether the relation is self referencing or not.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.RelationDefinition">
            <summary>
            A relation definitions.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.Role">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.Cardinality">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.DefinitionType">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.AssociatedEntityDefinitionName">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.PathHierarchyScore">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.ChildIsMandatory">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.ParentIsMandatory">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.InheritsSecurity">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.AllowNavigation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsNested">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.NestedProperties">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.NestedPermissions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsTaxonomyRelation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsTaxonomyHierarchyRelation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.ContentIsCopied">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.CompletionIsCopied">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsPathRelation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsPathHierarchyRelation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.IsRenditionRelation">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RelationDefinition.AssociatedLabels">
            <inheritdoc/>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Base.RelationManager._count">
            <summary>
            Keeps track of the loaded relations for performance reasons.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.GetRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Gets the relation. If <paramref name="role"/> is <see langword="null"/>
            and the relation is self-referencing, it will throw.
            Returns <see langword="null"/> if there are no loaded relations.
            </summary>
            <param name="name">The name of the relation.</param>
            <param name="role">The role of the relation.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/> if found, otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Relation is self-referencing and <paramref name="role"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.GetRelations">
            <summary>
             Gets a list of all loaded relations.
            </summary>
            <returns>A collection of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.GetRelationRole``1">
            <summary>
            Extracts the role of a relation from the interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            When the role could not be extracted from the interface.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.LoadRelationAsync(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Lazy loads a relation if it is not loaded yet, adds it to the loaded properties and returns it.
            If the relation does not exist, <see langword="null"/> will be returned.
            </summary>
            <param name="relationName">The name of the relation.</param>
            <param name="role">The name of the role.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IRelation"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="relationName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="relationName"/> is empty or whitespaces.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Relation is self-referencing and <paramref name="role"/>
            is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If lazy loading is not possible.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.LoadRelationsAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Loads the specified relations.
            It will only load if it is actually missing relations and does not overwrite existing relations.
            </summary>
            <param name="relationLoadOption">Relations to load.</param>
            <returns><see langword="true"/> if new relations were added.</returns>
            <exception cref="T:System.InvalidOperationException">
            When lazy loading is not possible.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="relationLoadOption"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.HasMissingRelations(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Checks if the entity is missing relations that are specified
            in <paramref name="relationLoadOption"/>.
            </summary>
            <param name="relationLoadOption">The relation load option.</param>
            <returns><see langword="true"/> has missing relations, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.Exists(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Checks if the specified relation is loaded.
            If <paramref name="role"/> is <see langword="null"/>, any loaded role will return
            <see langword="true"/>.
            </summary>
            <param name="relationName">The name of the relation.</param>
            <param name="role">The role of the relation.</param>
            <returns><see langword="true"/> if exists, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.ImportMissingRelations(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Imports missing relations from the <paramref>
                <name>entity</name>
            </paramref>
            .
            </summary>
            <param name="tempEntity">The entity.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.FetchRelationAsync(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Fetches the relation from the server.
            </summary>
            <param name="relationName">The name of the relation.</param>
            <param name="role">The role of the relation.</param>
            <returns>The relation.</returns>
            <exception cref="T:System.InvalidOperationException">
            When the relation is self-referencing, meaning that
            there are two matching relations. This only happens when the role
            was not specified.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RelationManager.AddRelation(Stylelabs.M.Sdk.Contracts.Base.IRelation)">
            <summary>
            Adds the relation to the loaded relations and updates the count.
            </summary>
            <param name="relation">The relation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="relation"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Relation name does not match container name.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Unknown <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole"/>.
            </exception>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.InternalException">
            Relation was already added.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.Rendition">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.Rendition.#ctor(System.String,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IRenditionItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Base.Rendition"/> class.
            </summary>
            <param name="name">Name of the rendition.</param>
            <param name="items">Items in this rendition.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.Rendition.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.Rendition.Items">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Base.RenditionItemBase">
            <summary>
            Base class for rendition items.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Base.RenditionItemBase.Href">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RenditionItemBase.DownloadAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Base.RenditionItemBase.GetStreamAsync">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetEntityIterator(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetEntityIdIterator(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetByDefinitionAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetIdsByDefinitionAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.SaveAsync(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.DeleteAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.CopyAsync(System.Int64,Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetManyAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntitiesClientBase.GetManyAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetCachedAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetCachedAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetNameAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetNameCachedAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetIdCachedAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetManyAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetManyCachedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetManyAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetManyCachedAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetNamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetNamesCachedAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetIdsCachedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetManyIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetRangeAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.GetRangeIdsAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.DeleteAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.DeleteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.SaveAsync(Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.CreateEntityDefinitionIterator(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.EntityDefinitionsClientBase.CreateEntityDefinitionIdIterator(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Clients.INotificationsClient" />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.GetMailTemplateAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.GetMailTemplateEntityAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.GetMailTemplatesAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.GetMailTemplateEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.Int64[])">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendConfirmationEmailAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestById)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestByUsername)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendEmailNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.MailRequestBroadcast)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestById)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestByUsername)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.SendRealTimeNotificationAsync(Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestBroadcast)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.NotificationClientBase.GetUserIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get user ids.
            </summary>
            <param name="usernames">The user names.</param>
            <returns>The user ids.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase">
            <summary>
            Base class for querying clients.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.QueryAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.QueryIdsAsync(Stylelabs.M.Base.Querying.Query)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.SingleAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.SingleIdAsync(Stylelabs.M.Base.Querying.Query)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.CreateEntityIterator(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.CreateEntityIdIterator(Stylelabs.M.Base.Querying.Query)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.CreateEntityScroller(Stylelabs.M.Base.Querying.Query,System.Nullable{System.TimeSpan},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.CreateEntityIdScroller(Stylelabs.M.Base.Querying.Query,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.ResolveLoadConfiguration(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
             <summary>
             This is used to get a valid entity load config from a query for compatibility with the 3.0 SDK.
            
             Situation: in 3.0 we only had the query as parameter in the query client, and the load config was on the query.
             In 3.1 we have the query and optional load config from as parameter.
            
             For compatibility, the query load config needs priority if the load config was not specified as parameter.
             </summary>
             <param name="query">The <see cref="T:Stylelabs.M.Base.Querying.Query"/>.</param>
             <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
             <returns>A <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.GetEntityScrollEngine">
            <summary>
            Gets the implementation specific scrolling engine for entity retrieval.
            </summary>
            <returns>A <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine`1"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.QueryingClientBase.GetIdScrollEngine">
            <summary>
            Gets the implementation specific scrolling engine for id retrieval.
            </summary>
            <returns>A <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine`1"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase">
            <summary>
            Base implementation if <see cref="T:Stylelabs.M.Sdk.Clients.ISettingsClient"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase.GetCategoryIdAsync(System.String)">
            <summary>
            Gets a category id.
            </summary>
            <param name="name">The name of the category.</param>
            <returns>The category id.</returns>
            <exception cref="T:System.InvalidOperationException">If more than one category with the same name is found.</exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase.GetSettingAsync(System.String,System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets a setting.
            </summary>
            <param name="category">The category of the setting.</param>
            <param name="name">The name of the setting.</param>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <returns>The <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> of the setting.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.SettingsClientBase.GetSettingsForCategoryAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets all settings in a category.
            </summary>
            <param name="category">The category of the setting.</param>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <returns>The list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/> settings.</returns>
            <exception cref="T:Stylelabs.M.Sdk.Exceptions.NotFoundException">If the category was not found.</exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.UserClientBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Clients.UserClientBase"/> class.
            </summary>
            <param name="client">The <see cref="T:Stylelabs.M.Sdk.IMClient"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="client"/> is null.</exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Clients.UserClientBase.MClient">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUsernameAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUsernamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUsersAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUsersAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupNameAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupNamesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupAsync(System.Int64,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupsAsync(System.Collections.Generic.IEnumerable{System.Int64},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupAsync(System.String,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.GetUserGroupsAsync(System.Collections.Generic.IEnumerable{System.String},Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.ResetPasswordAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.UserClientBase.SetPasswordAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.#ctor(Stylelabs.M.Sdk.IMClient)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Content.IFinalLifeCycleManager" />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.ApproveAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.ArchiveAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.DirectPublishAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.RejectAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.RestoreAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.SubmitAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.GetFinalLifeCycleStatusIdAsync(Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Clients.FinalLifeCycleManagerBase.GetFinalLifeCycleStatusIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.AssetHelper">
            <summary>
            Asset helper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.AssetHelper.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Contracts.Content.IAsset)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Content.AssetHelper"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="asset">The asset.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="client"/> or <paramref name="asset"/> are null.</exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.AssetHelper.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.AssetHelper.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.AssetHelper.LoadTypedMembersAsync">
            <summary>
            Loads members.
            </summary>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.AssetHelper.GetDescription(System.Globalization.CultureInfo)">
            <summary>
            Gets the description.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The description in the specified culture.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.AssetHelper.SetDescription(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="culture">The culture.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.AssetHelper.GetFinalLifeCycleStatusAsync">
            <summary>
            Gets the life cycle status.
            </summary>
            <returns>The entity <see cref="T:Stylelabs.M.Sdk.Contracts.Content.FinalLifeCycleStatus"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions">
            <summary>
            Default implementation of <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.CopyProfileIdentifier">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.CopyProfileId">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.DestinationEntityId">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.RelationCopyOptions">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.PropertyCopyOptions">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptions.Builder">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder">
            <summary>
             Default implementation of <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.#ctor(Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder"/> class.
            </summary>
            <param name="copyOptions">The <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithProperty(System.String,Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithProperties(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithRelation(System.String,Stylelabs.M.Sdk.Models.Content.RelationCopyMethod,Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Models.Content.IRelationCopyOption})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithDestinationEntityId(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithCopyProfile(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.WithCopyProfile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.EntityCopyOptionsBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions">
            <summary>
            Represents options for copying an entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.CopyProfileIdentifier">
            <summary>
            Gets or sets identifier of a copy profile that could be used for copying of an entity if relation and/or property options are not specified.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.CopyProfileId">
            <summary>
            Gets or sets identifier of a copy profile that could be used for copying of an entity if relation and/or property options are not specified.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.DestinationEntityId">
            <summary>
            Gets or sets id of an entity that will be updated by copying values from an original entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.RelationCopyOptions">
            <summary>
            Gets or sets relation copy options.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.PropertyCopyOptions">
            <summary>
            Gets or sets property copy options.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions.Builder">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder"/> from the current <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.
            The builder can extend or overwrite the configuration of the current <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.
            </summary>
            <returns>A instance of <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder">
            <summary>
            A builder for instances of <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithProperty(System.String,Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod,System.String)">
            <summary>
            Indicates that the entity should be copied with the specified <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property.</param>
            <param name="method">The copy method.</param>
            <param name="newValue">The property new value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithProperties(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption})">
            <summary>
            Indicates that the entity should be copied with the specified <paramref name="properties"/>.
            </summary>
            <param name="properties">The properties collection.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithRelation(System.String,Stylelabs.M.Sdk.Models.Content.RelationCopyMethod,Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <summary>
            Indicates that the entity should be copied with the specified <paramref name="relation"/>.
            </summary>
            <param name="relation">The name of the relation.</param>
            <param name="method">The copy method.</param>
            <param name="relatedOptions">The related options.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Models.Content.IRelationCopyOption})">
            <summary>
            Indicates that the entity should be copied with the specified <paramref name="relations"/>.
            </summary>
            <param name="relations">The relations collection.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithDestinationEntityId(System.Int64)">
            <summary>
            Indicates that the entity should be copied to the entity with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The destination entity id.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithCopyProfile(System.Int64)">
            <summary>
            Indicates that the entity should be copied using the copy profile with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The id of the copy profile.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.WithCopyProfile(System.String)">
            <summary>
            Indicates that the entity should be copied using the copy profile with the specified <paramref name="identifier"/>.
            </summary>
            <param name="identifier">The identifier of the copy profile.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptionsBuilder.Build">
            <summary>
            Gets the resulting instance of <see cref="T:Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions"/>.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption">
            <summary>
            Represents options for copying an entity's property.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption.Name">
            <summary>
            Gets or sets property name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption.Method">
            <summary>
            Gets or sets copy method name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption.NewValue">
            <summary>
            Gets or sets new value of property.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.IRelationCopyOption">
            <summary>
            Represents options for copying an entity's relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IRelationCopyOption.Name">
            <summary>
            Gets or sets relation name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IRelationCopyOption.Method">
            <summary>
            Gets or sets copy method name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.IRelationCopyOption.RelatedCopyOptions">
            <summary>
            Gets or sets copy options of related entities.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod">
            <summary>
            Property copy methods.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod.Keep">
            <summary>
            Keeps the value of the property.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod.Overwrite">
            <summary>
            Overwrites the value of the property.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod.Remove">
            <summary>
            Removes the value of the property.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod.Ignore">
            <summary>
            Skips the property and the original value of the destination entity is kept.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption">
            <summary>
            Default implementation of <see cref="T:Stylelabs.M.Sdk.Models.Content.IPropertyCopyOption"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption.#ctor(System.String,Stylelabs.M.Sdk.Models.Content.PropertyCopyMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="method">The copy method to use.</param>
            <param name="newValue">The property new value.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption.Name">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption.Method">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.PropertyCopyOption.NewValue">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.RelationCopyMethod">
            <summary>
            Relation copy methods.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.RelationCopyMethod.Keep">
            <summary>
            Creates references to the same associated entities.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.RelationCopyMethod.Remove">
            <summary>
            Creates an empty relation.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.RelationCopyMethod.Copy">
            <summary>
            Creates references to copies of the associated entities.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Content.RelationCopyMethod.Ignore">
            <summary>
            Skips the relation and the original value of the destination entity is kept.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Content.RelationCopyOption">
            <summary>
            Default implementation of <see cref="T:Stylelabs.M.Sdk.Models.Content.IRelationCopyOption"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Content.RelationCopyOption.#ctor(System.String,Stylelabs.M.Sdk.Models.Content.RelationCopyMethod,Stylelabs.M.Sdk.Models.Content.IEntityCopyOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Content.RelationCopyOption"/> class.
            </summary>
            <param name="name">The name of the relation.</param>
            <param name="method">The copy method.</param>
            <param name="relatedCopyOptions">The related copy options.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.RelationCopyOption.Name">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.RelationCopyOption.Method">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Content.RelationCopyOption.RelatedCopyOptions">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Factories.DataSourceFactoryBase">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.DataSourceFactoryBase.CreateFlatDataSource(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.DataSourceFactoryBase.CreateHierarchicalDataSource(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Factories.EntityFactoryBase`1">
            <summary>
            Base class for the entity factories.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.EntityFactoryBase`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Factories.IRelationFactory,Stylelabs.M.Sdk.Utilities.ICultureLoader,Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase{`0})">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Factories.IEntityFactory" />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.EntityFactoryBase`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Factories.IRelationFactory,Stylelabs.M.Sdk.Utilities.ICultureLoader)">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Factories.IEntityFactory" />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.EntityFactoryBase`1.CreateAsync(System.String,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.EntityFactoryBase`1.CreateAsync(Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Factories.PropertyFactory">
            <summary>
            A property factory.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.PropertyFactory.CreateProperties(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition},System.Collections.Generic.HashSet{System.Globalization.CultureInfo})">
            <summary>
            Creates a new collection of properties.
            </summary>
            <param name="definitions">The definitions.</param>
            <param name="cultures">
            The cultures to initialize a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty"/> with.
            </param>
            <returns>A new property collection.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.PropertyFactory.CreateCultureSensitiveProperty(Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition,System.Collections.Generic.HashSet{System.Globalization.CultureInfo})">
            <summary>
            Creates a new <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty"/>.
            </summary>
            <param name="definition">Property definition.</param>
            <param name="cultures">
            The cultures to initialize a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureSensitiveProperty"/> with.
            </param>
            <returns>A new property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> or <paramref name="cultures"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="cultures"/> is empty or contains <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            or <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="definition"/> is not a culture sensitive property definition.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.PropertyFactory.CreateCultureInSensitiveProperty(Stylelabs.M.Sdk.Contracts.Base.IPropertyDefinition)">
            <summary>
            Creates a new <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ICultureInsensitiveProperty"/>.
            </summary>
            <param name="definition">Property definition.</param>
            <returns>A new property.</returns>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="definition"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="definition"/> is a culture sensitive property definition.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase">
            <summary>
            A base class for <see cref="T:Stylelabs.M.Sdk.Factories.IRelationFactory"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateChildToManyParentsRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateChildToOneParentRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateParentToManyChildrenRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.RelationFactoryBase.CreateParentToOneChildRelation(Stylelabs.M.Sdk.Contracts.Base.IRelationDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase`1">
            <summary>
            Base typed entity creator.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase`1.CreateTypedEntity(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Initializes a new instance of <see>
                <cref>TypedEntityCreatorBase</cref>
            </see>
            .
            </summary>
            <param name="args">The <see cref="T:Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs"/>.</param>
            <returns>A <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase`1.CreateEntity(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Creates an entity.
            </summary>
            <param name="args">Entity creation args.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase`1.CreateAsset(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Creates an asset.
            </summary>
            <param name="args">Entity creation args.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Factories.TypedEntityCreatorBase`1.CreateMailTemplate(Stylelabs.M.Sdk.Models.Base.EntityConstructionArgs)">
            <summary>
            Creates a mail template.
            </summary>
            <param name="args">Entity creation args.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey">
            <summary>
            Represents a key referencing a file in Azure blob storage.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey"/> class.
            </summary>
            <param name="provider">Name of the provider.</param>
            <param name="key">Key of the file to fetch.</param>
            <exception cref="T:System.ArgumentNullException">
            Parameters <paramref name="provider"/> and <paramref name="key"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="provider"/> and <paramref name="key"/> cannot be a empty or whitespaces.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey.Provider">
            <summary>
            Gets the name of the provider. The provider should be configured in M.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey.Key">
            <summary>
            Gets the key referencing the file to fetch.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.AzureBlobKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Jobs.AzureFetchJobRequest">
            <summary>
            Creates a fetch job that fetches one or more files from azure blob storage.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.AzureFetchJobRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Jobs.AzureFetchJobRequest"/> class.
            </summary>
            <param name="description">A user-friendly description of the fetch job.</param>
            <param name="assetId">Id of the asset to link the fetched file to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="description"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="assetId"/> must be strictly positive.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.AzureFetchJobRequest.Keys">
            <summary>
            Gets or sets the azure blob keys.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.AzureFetchJobRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest">
            <summary>
            Base class for all fetch-job requests.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest"/> class.
            </summary>
            <param name="description">A user-friendly description of the fetch job.</param>
            <param name="assetId">Id of the asset to link the fetched file to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="description"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="assetId"/> must be strictly positive.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest.Description">
            <summary>
            Gets a user-friendly description of the fetch job.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest.AssetId">
            <summary>
            Gets the id of the asset to link the newly fetched file to.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.FetchJobRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Jobs.FileFetchJobRequest">
            <summary>
            Creates a fetch job that fetches one or more files from a directory on the web-server.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.FileFetchJobRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Jobs.FileFetchJobRequest"/> class.
            </summary>
            <param name="description">A user-friendly description of the fetch job.</param>
            <param name="assetId">Id of the asset to link the fetched file to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="description"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="assetId"/> must be strictly positive.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.FileFetchJobRequest.Paths">
            <summary>
            Gets or sets the paths of the files to fetch.
            Paths should be absolute file URLs.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.FileFetchJobRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Jobs.WebFetchJobRequest">
            <summary>
            Creates a fetch job that fetches one or more files over HTTP.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.WebFetchJobRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Jobs.WebFetchJobRequest"/> class.
            </summary>
            <param name="description">A user-friendly description of the fetch job.</param>
            <param name="assetId">Id of the asset to link the fetched file to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="description"/> cannot be a empty or whitespaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="assetId"/> must be strictly positive.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Jobs.WebFetchJobRequest.Urls">
            <summary>
            Gets or sets the URLs of the files to fetch.
            Urls should be absolute HTTP(S) URLs.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Jobs.WebFetchJobRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Localization.Parameter">
            <summary>
            Defines a named or positional parameter for translations.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Localization.Parameter.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Localization.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Localization.Parameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Localization.Parameter.Value">
            <summary>
            Gets the parameter value.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger">
             <summary>
             A simple console logger that can print with or
             without a built-in template.
            
             The template is: "DateTime | LogLevel | Message".
            
             The minimum log level is info by default.
             </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.UseTemplate">
            <summary>
            Gets or sets a value indicating whether enables or disables logging using a template.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.LogDebug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.LogError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.LogError(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.LogInfo(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.ConsoleLogger.LogWarn(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Logging.LoggerBase">
             <summary>
             Base implementation of <see cref="T:Stylelabs.M.Sdk.Contracts.Logging.ILogger"/>.
            
              The minimum log level is info by default.
             </summary>
        </member>
        <member name="E:Stylelabs.M.Sdk.Models.Logging.LoggerBase.OnLog">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.LoggerBase.IsDebugEnabled">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.LoggerBase.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.LoggerBase.IsWarnEnabled">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.LoggerBase.IsErrorEnabled">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.LoggerBase.MinimumLogLevel">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Debug(System.Func{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.DebugAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Info(System.Func{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.InfoAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Warn(System.Func{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.WarnAsync(System.Func{System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Error(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.Error(System.Func{System.String},System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.ErrorAsync(System.Func{System.Threading.Tasks.Task{System.String}},System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.LogDebug(System.String)">
            <summary>
            Logs debug-level information.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.LogInfo(System.String)">
            <summary>
            Logs info-level information.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.LogWarn(System.String)">
            <summary>
            Logs warning-level information.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.LogError(System.String,System.Exception)">
            <summary>
            Logs error-level information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.LoggerBase.LogError(System.Exception)">
            <summary>
            Logs error-level information.
            </summary>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Logging.NullLogger">
            <summary>
            Implementation of <see cref="T:Stylelabs.M.Sdk.Contracts.Logging.ILogger"/> that discards all messages (but still fires events).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Logging.NullLogger.MinimumLogLevel">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.NullLogger.LogDebug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.NullLogger.LogError(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.NullLogger.LogError(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.NullLogger.LogInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Logging.NullLogger.LogWarn(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.MailRequest">
            <summary>
            Base class for mail requests.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.MailRequest.MailTemplateName">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.MailRequest.Variables">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.MailRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.MailRequestBroadcast">
            <summary>
            A request for sending e-mails to all users in M.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.MailRequestBroadcast.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.MailRequestById">
            <summary>
            A request for sending e-mails to specified users by id.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.MailRequestById.Recipients">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.MailRequestById.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.MailRequestByUsername">
            <summary>
            A request for sending e-mails specified users by username.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.MailRequestByUsername.Recipients">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.MailRequestByUsername.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.NotificationLevel">
            <summary>
            Enum for notification levels.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Notifications.NotificationLevel.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Notifications.NotificationLevel.Danger">
            <summary>
            Danger.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Notifications.NotificationLevel.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest">
            <summary>
            Base class for real-time notification (browser notification) requests.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.Title">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.Link">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.NotificationLevel">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.Options">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.GetBody">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.SetBody(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.GetIcon">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.SetIcon(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestBroadcast">
            <summary>
            A request for sending real-time notifications to all users in M.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestBroadcast.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestById">
            <summary>
            A request for sending real-time notifications to specified users by id.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestById.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestById.Validate">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequest"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestByUsername">
            <summary>
            A request for sending real-time notifications to specified users by username.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestByUsername.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Notifications.RealtimeRequestByUsername.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Package.AzurePackageSource">
            <summary>
            Azure package source.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.AzurePackageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Package.AzurePackageSource"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.AzurePackageSource.GetFetchParams">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Package.FilePackageSource">
            <summary>
            File package source.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.FilePackageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Package.FilePackageSource"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.FilePackageSource.GetFetchParams">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Package.PackageImportRequest">
            <summary>
            Package import request.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Package.PackageImportRequest.Package">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Package.WebPackageSource">
            <summary>
            Web package source.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.WebPackageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Package.WebPackageSource"/> class.
            </summary>
            <param name="href">The href.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Package.WebPackageSource.GetFetchParams">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.Condition">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Condition.EntityIds">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Condition.DirectEntityIds">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.MemberPolicy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.MemberPolicy.DefinitionName">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.MemberPolicy.Target">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.MemberPolicy.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.MemberPolicy.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.Policy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.Rules">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.CreatedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.CreatedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.ModifiedBy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.ModifiedOn">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.MemberSecurity">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Policy.MemberGroupSecurity">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Policies.Policy.GetRelatedId">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.Rule">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.DefinitionNames">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.Conditions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.Permissions">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.CreatedByLoggedOnUser">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.Type">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.Rule.IsSystemOwned">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Policies.Rule.SetIdentifier(System.Nullable{System.Guid})">
            <summary>
            Sets the identifier.
            </summary>
            <param name="guid">The identifier.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.UserGroupPolicy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.UserGroupPolicy.UserGroupId">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Policies.UserGroupPolicy.GetRelatedId">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Policies.UserPolicy">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Policies.UserPolicy.UserId">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Policies.UserPolicy.GetRelatedId">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult"/>.
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator.#ctor(Stylelabs.M.Sdk.IMClient,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="pageSize">The page size.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="result">The query result.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdIterator.GetResultAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdQueryResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdQueryResult.#ctor(Stylelabs.M.Sdk.IMClient,System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdQueryResult"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="items">The items.</param>
            <param name="totalItems">The total of items.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIdQueryResult.CreateIterator">
            <summary>
            Creates a new iterator that will continue iterating from this result.
            </summary>
            <returns>A new iterator.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionIterator"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator.#ctor(Stylelabs.M.Sdk.IMClient,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="pageSize">The page size.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionQueryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="result">The query result.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionIterator.GetResultAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionQueryResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityDefinitionQueryResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionQueryResult.#ctor(Stylelabs.M.Sdk.IMClient,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IEntityDefinition},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionQueryResult"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="items">The items.</param>
            <param name="totalItems">The total of items.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityDefinitionQueryResult.CreateIterator">
            <summary>
            Creates a new iterator that will continue iterating from this result.
            </summary>
            <returns>A new iterator.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query,Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
            <param name="result">The query result.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIdIterator.GetResultAsync(Stylelabs.M.Base.Querying.Query)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityIdQueryResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdQueryResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIdQueryResult.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query,System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityIdQueryResult"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
            <param name="ids">The ids.</param>
            <param name="totalItems">The total items.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIdQueryResult.CreateIterator">
            <summary>
            Creates a new iterator that will continue iterating from this result.
            </summary>
            <returns>A new iterator.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityIdScroller">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScroller"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityIterator">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityIterator"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
            <param name="loadConfiguration">The load configuration.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIterator.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration,Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityIterator"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="result">The query result.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityIterator.GetResultAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityQueryResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityQueryResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityQueryResult.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IEntity},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityQueryResult"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="query">The query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="entities">The entities.</param>
            <param name="totalItems">The total items.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityQueryResult.CreateIterator">
            <summary>
            Creates a new iterator that will continue iterating from this result.
            </summary>
            <returns>A new iterator.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityScroller">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScroller"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityScroller.#ctor(Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine{Stylelabs.M.Sdk.Contracts.Querying.IEntityScrollResult},Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityScroller"/> class.
            </summary>
            <param name="engine">The engine.</param>
            <param name="query">The query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="timespan">The time span.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.EntityScrollResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IEntityScrollResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.EntityScrollResult.#ctor(System.String,System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IEntity},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.EntityScrollResult"/> class.
            </summary>
            <param name="scrollId">The scroll id.</param>
            <param name="items">The items.</param>
            <param name="totalItems">The total items count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.IdScrollResult">
            <inheritdoc cref="T:Stylelabs.M.Sdk.Contracts.Querying.IIdScrollResult"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.IdScrollResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.IdScrollResult"/> class.
            </summary>
            <param name="scrollId">The scroll id.</param>
            <param name="items">The items.</param>
            <param name="totalItems">The total items count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1">
            <summary>
            Base implementation for Query iterators that support loading of entities.
            </summary>
            <typeparam name="T">The type result returned by the iterator.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.#ctor(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1"/> class.
            Optionally, you can pass a <paramref>
                <name>current</name>
            </paramref>
            result,
            and the iterator will continue from that point on.
            </summary>
            <param name="query">The 'request' query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.#ctor(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1"/> class.
            </summary>
            <param name="query">The 'request' query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="result">The current result.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.Stylelabs#M#Sdk#Contracts#Base#IIterator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.CanMovePrevious">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.CanMoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.MovePreviousAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.LoadingQueryIteratorBase`1.GetResultAsync(Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Gets the results.
            </summary>
            <param name="query">The 'request' query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>The query results.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1">
            <summary>
            Base implementation for Query iterators.
            </summary>
            <typeparam name="T">The type result returned by the iterator.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.#ctor(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1"/> class.
            </summary>
            <param name="query">The 'request' query.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.#ctor(Stylelabs.M.Base.Querying.Query,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1"/> class
            and continues iterating from the specified result on.
            </summary>
            <param name="query">The 'request' query.</param>
            <param name="result">The result to start iterating from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> and <paramref name="result"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.Stylelabs#M#Sdk#Contracts#Base#IIterator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.CanMovePrevious">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.CanMoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.MovePreviousAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryIteratorBase`1.GetResultAsync(Stylelabs.M.Base.Querying.Query)">
            <summary>
            Gets the results.
            </summary>
            <param name="query">The 'request' query.</param>
            <returns>The query results.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1">
            <summary>
            Base implementation for Query results.
            </summary>
            <typeparam name="T">Type of the queried items.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="totalItems">The items total.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1.Items">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1.TotalNumberOfResults">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1.Offset">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.QueryResultBase`1.Stylelabs#M#Sdk#Contracts#Querying#IQueryResult#Items">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager">
            <summary>
            Query result paging manager.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager.CanMovePrevious(Stylelabs.M.Sdk.Contracts.Querying.IQueryResult)">
            <summary>
            Checks if the query can move to the previous page.
            </summary>
            <param name="queryResult">The query result.</param>
            <returns>Weather the query can move to previous page.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager.CanMoveNext(Stylelabs.M.Sdk.Contracts.Querying.IQueryResult)">
            <summary>
            Checks if the query can move to the next page.
            </summary>
            <param name="queryResult">The query result.</param>
            <returns>Weather the query can move to next page.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager.GetOffsetPreviousPage(Stylelabs.M.Sdk.Contracts.Querying.IQueryResult)">
            <summary>
            Gets the previous page offset.
            </summary>
            <param name="queryResult">The query result.</param>
            <returns>The offset.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager.GetOffsetNextPage(Stylelabs.M.Sdk.Contracts.Querying.IQueryResult)">
            <summary>
            Gets the next page offset.
            </summary>
            <param name="queryResult">The query result.</param>
            <returns>The offset.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.QueryResultPagingManager.GetIterationPagesize(Stylelabs.M.Sdk.Contracts.Querying.IQueryResult)">
            <summary>
            Gets the page size.
            </summary>
            <param name="queryResult">The query result.</param>
            <returns>The page size.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.#ctor(Stylelabs.M.Sdk.Contracts.Querying.IScrollEngine{`0},Stylelabs.M.Base.Querying.Query,Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1"/> class.
            </summary>
            <param name="engine">The scroll engine.</param>
            <param name="query">The query.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <param name="scrollTime">The scroll time.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.Stylelabs#M#Sdk#Contracts#Querying#IScroller#Current">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.CanMoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.ScrollerBase`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.ScrollResultBase`1">
            <summary>
            Base implementation of <see cref="T:Stylelabs.M.Sdk.Contracts.Querying.IScrollResult"/>.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.ScrollResultBase`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.ScrollResultBase`1"/> class.
            </summary>
            <param name="scrollId">The id of the scroll.</param>
            <param name="items">The items.</param>
            <param name="totalItems">The total of items.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.ScrollResultBase`1.ScrollId">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1">
            <summary>
            Base implementation for Query iterators.
            </summary>
            <typeparam name="T">The type result returned by the iterator.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1"/> class.
            </summary>
            <param name="pageSize">The size of the page.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1"/> class
            and continues iterating from the specified result on.
            </summary>
            <param name="result">The result to start iterating from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> cannot be <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.Stylelabs#M#Sdk#Contracts#Base#IIterator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.CanMovePrevious">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.CanMoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.MovePreviousAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Querying.SkipTakeIteratorBase`1.GetResultAsync(System.Int64,System.Int64)">
            <summary>
            Gets results.
            </summary>
            <param name="skip">How many items to skip.</param>
            <param name="take">How many items to take.</param>
            <returns>The results.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Tracking.DirtyValueCalculator">
             <summary>
             This class will check if values are dirty or not.
             Note however that this tracker only supports types that are supported in M:
              * Primitives
              * JTokens
              * Collections of primitives
            
             The goals is to have intelligent dirty tracking.
             * If the value was set to A, then set to B and finally A again,
               then it should be marked not dirty.
             * If the value was set to A, and B is a copy of A (reference is not the same),
               then it should be marked not dirty.
            
             For optimal performance, try to prevent unnecessary IsDirty checks.
             </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Tracking.DirtyValueCalculator.CachedHashCode">
            <summary>
            Gets the cached has code.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Tracking.DirtyValueCalculator.IsDirty(System.Object)">
            <summary>
            Checks if the object is dirty.
            </summary>
            <param name="value">The value.</param>
            <returns><see langword="true"/> if dirty, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Tracking.DirtyValueCalculator.SetOriginalValue(System.Object)">
            <summary>
            Sets the original value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Tracking.DirtyValueCalculator.ComputeCollectionHashCode(System.Collections.IEnumerable)">
            <summary>
            Computes the hash code of a collection.
            Note that this assumes that the collection contents are primitives/JToken
            or/and the GetHashCode is implemented.
            </summary>
            <param name="collection">Collection to compute hash code on.</param>
            <returns>A hash code for this collection.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityDefinitionConstraintAttribute">
            <summary>
            Allows to put a constraint on <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/> to ensure the handled entity is of a certain entity definition.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityDefinitionConstraintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityDefinitionConstraintAttribute"/> class.
            </summary>
            <param name="definitionName">The definition name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityDefinitionConstraintAttribute.DefinitionName">
            <summary>
            Gets the entity definition name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityPropertyAttribute">
            <summary>
            By default the entity property name is inferred from the declared property name. If that name is not suitable, this attribute allows to specify an alternate name.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityPropertyAttribute"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityPropertyAttribute.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityRelationAttribute">
            <summary>
            By default the entity relation name is inferred from the declared property name. If that name is not suitable, this attribute allows to specify an alternate name.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityRelationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityRelationAttribute"/> class.
            </summary>
            <param name="relationName">The relation name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Attributes.TypedEntityRelationAttribute.RelationName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.CultureSensitive`1">
            <summary>
            Defines a culture sensitive property for a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.CultureSensitive`1.#ctor(Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.CultureSensitive`1"/> class.
            </summary>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.CultureSensitive`1.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets or sets the specified property in the desired culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyCultureSensitive`1">
            <summary>
            Defines a read-only culture sensitive property for a <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyCultureSensitive`1.#ctor(Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyCultureSensitive`1"/> class.
            </summary>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyCultureSensitive`1.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets the specified property in the desired culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToManyRelation`1">
            <summary>
            Defines a readonly-relation that is associated with many entities.
            </summary>
            <typeparam name="TRelation">The relation type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToManyRelation`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToManyRelation`1"/> class.
            </summary>
            <param name="client">The <see cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="relationName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToManyRelation`1.Ids">
            <summary>
            Gets the value of the relation.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToOneRelation`1">
            <summary>
            Defines a readonly-relation that is associated with only one entity.
            </summary>
            <typeparam name="TRelation">The type of the relation.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToOneRelation`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToOneRelation`1"/> class.
            </summary>
            <param name="client">The <see cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="relationName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.ReadOnlyToOneRelation`1.Id">
            <summary>
            Gets the value of the relation.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1">
            <summary>
            Defines a relation that is associated with many entities.
            </summary>
            <typeparam name="TRelation">The type of the relation.</typeparam>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.Relation">
            <summary>
            The relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1"/> class.
            </summary>
            <param name="client">The <see cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="relationName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.Ids">
            <summary>
            Gets or sets the value of the relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.GetEntitiesAsync(Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration)">
            <summary>
            Gets the related entities as an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.
            </summary>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <returns>A list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToManyRelation`1.GetEntitiesAsync``1(Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration)">
            <summary>
            Gets the related entities as a typed <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.
            </summary>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>A list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1">
            <summary>
            Defines a relation that is associated with only one entity.
            </summary>
            <typeparam name="TRelation">The type of the relation.</typeparam>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.Relation">
            <summary>
            The relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.#ctor(Stylelabs.M.Sdk.IMClient,Stylelabs.M.Sdk.Utilities.TypedEntityWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1"/> class.
            </summary>
            <param name="client">The <see cref="T:Stylelabs.M.Sdk.IMClient"/> instance.</param>
            <param name="wrapper">The typed entity wrapper.</param>
            <param name="relationName">The property name.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.Id">
            <summary>
            Gets or sets the value of the relation.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.GetEntityAsync(Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration)">
            <summary>
            Gets the related entity as an <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.
            </summary>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <returns>A list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.Fields.ToOneRelation`1.GetEntityAsync``1(Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration)">
            <summary>
            Gets the related entity as a typed <see cref="T:Stylelabs.M.Sdk.Contracts.Base.ITypedEntity"/>.
            </summary>
            <param name="loadConfiguration">The <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.</param>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>A list of <see cref="T:Stylelabs.M.Sdk.Contracts.Base.IEntity"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IAssetEntity">
            <summary>
            Defines a typed entity of type M.Asset.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IAssetEntity.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IAssetEntity.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IAssetEntity.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IAssetEntity.FinalLifeCycleStatusToAsset">
            <summary>
            Gets the FinalLifeCycleStatusToAsset relation.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IFileEntity">
            <summary>
            Defines a typed entity of type M.File.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IFileEntity.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity">
            <summary>
            Defines a typed entity of type M.Mailing.Template.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity.Subject">
            <summary>
            Gets the subject.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity.Body">
            <summary>
            Gets the body.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IMailTemplateEntity.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity">
            <summary>
            Defines a typed entity of type M.PublicLink.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity.ConversionConfiguration">
            <summary>
            Gets or sets the conversion configuration.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity.ExpirationDate">
            <summary>
            Gets or sets the expiration date.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity.RelativeUrl">
            <summary>
            Gets or sets the relative URL.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IPublicLinkEntity.AssetToPublicLink">
            <summary>
            Gets the AssetToPublicLink relation.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.ISettingEntity">
            <summary>
            Defines a typed entity of type M.Setting.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.ISettingEntity.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.ISettingEntity.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.ISettingEntity.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.ISettingEntity.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IUserEntity">
            <summary>
            Defines a typed entity of type User.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IUserEntity.Username">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IUserEntity.UserGroupConfiguration">
            <summary>
            Gets or sets the user group configuration.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IUserEntity.EmailConfirmationPending">
            <summary>
            Gets or sets a value indicating whether gets or sets whether the email confirmation is pending.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.IUserGroupEntity">
            <summary>
            Defines a typed entity of type UserGroup.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.IUserGroupEntity.GroupName">
            <summary>
            Gets the group name.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase">
            <summary>
            Proxies all entity properties and methods to the underlying entity.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.#ctor(Stylelabs.M.Sdk.Contracts.Base.IEntity,Stylelabs.M.Sdk.IMClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="client">The client.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.CreatedOn">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.ModifiedBy">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.ModifiedOn">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsTracking">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsDirty">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Identifier">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsNew">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.DefinitionName">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LockedBy">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LockedOn">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsRootTaxonomyItem">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsPathRoot">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.InheritsSecurity">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.IsSystemOwned">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Version">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Properties">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Relations">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.Renditions">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.RelatedPaths">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.__Client">
            <summary>
            Gets the client. Provides access to the <see cref="T:Stylelabs.M.Sdk.IMClient"/> instance.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.__EntityWrapper">
            <summary>
            Gets the entity mapper. Provides access to a managed wrapper for entity operations.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.StartTracking">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.MarkClean">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetProperty``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValueAsync(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValueAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValue(System.String,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValue``1(System.String,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPropertyValueAsync``1(System.String,System.Globalization.CultureInfo,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.SetPropertyValue(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.SetPropertyValue(System.String,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetRelation``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetRelationAsync(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole},Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetRelationAsync``1(System.String,Stylelabs.M.Sdk.Contracts.Base.MemberLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.CanDoLazyLoading">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LoadPropertiesAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LoadRelationsAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LoadMembersAsync(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetRendition(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetEntityDefinitionAsync">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.GetPermissionsAsync">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.Typed.TypedEntityProxyBase.LoadTypedMembersAsync">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper">
            <summary>
            Defines the mail template helper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.#ctor(Stylelabs.M.Sdk.Models.Base.EntityBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="P:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.Name">
            <summary>
            Gets or sets the template name.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.LoadTypedMembersAsync">
            <summary>
            Loads typed members.
            </summary>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.GetBody(System.Globalization.CultureInfo)">
            <summary>
            Gets the body of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The body of the mail template.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.GetDescription(System.Globalization.CultureInfo)">
            <summary>
            Gets the description of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The description of the mail template.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.GetSubject(System.Globalization.CultureInfo)">
            <summary>
            Gets the subject of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The subject of the mail template.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.SetBody(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the body of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <param name="body">The body of the mail template.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.SetDescription(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the description of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <param name="description">The description of the mail template.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.SetSubject(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets the subject of the mail template.
            </summary>
            <param name="culture">The culture.</param>
            <param name="subject">The subject of the mail template.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.GetTemplateVariables">
            <summary>
            Gets the variables.
            </summary>
            <returns>The list of variables.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Models.TypedEntities.MailTemplateHelper.SetTemplateVariables(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Notifications.TemplateVariable})">
            <summary>
            Sets the variables.
            </summary>
            <param name="variables">The list of variables.</param>
        </member>
        <member name="T:Stylelabs.M.Sdk.Utilities.ConcreteTypeConverter`1">
            <summary>
            Concrete type converter.
            </summary>
            <typeparam name="TConcrete">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ConcreteTypeConverter`1.CanConvert(System.Type)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ConcreteTypeConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ConcreteTypeConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="T:Stylelabs.M.Sdk.Utilities.ICultureLoader">
            <summary>
            Allows fetching culture information from M.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ICultureLoader.GetDefaultCultureAsync">
            <summary>
            Gets the default culture in M.
            </summary>
            <returns>The default culture.</returns>
            <exception cref="T:System.InvalidOperationException">
            When no installed cultures were found.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ICultureLoader.GetDefaultCultureCachedAsync">
            <summary>
            Gets the default culture in M (cached).
            </summary>
            <returns>The default cached culture.</returns>
            <exception cref="T:System.InvalidOperationException">
            When no installed cultures were found.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ICultureLoader.GetAllCulturesAsync">
            <summary>
            Gets all installed cultures in M.
            </summary>
            <returns>All cultures.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.ICultureLoader.GetAllCulturesCachedAsync">
            <summary>
            Gets all installed cultures in M (cached).
            </summary>
            <returns>All cached cultures.</returns>
        </member>
        <member name="T:Stylelabs.M.Sdk.Utilities.SdkGuard">
            <summary>
            Sdk Guard.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.ValidId(System.String,System.Nullable{System.Int64})">
            <summary>
            If the id is not null, it must be strictly positive.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="id">Id to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Id is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNegative(System.String,System.Int64)">
            <summary>
            Checks if the specified long is negative.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/> is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.StrictlyPositive(System.String,System.Int32)">
            <summary>
            Checks if the specified number is strictly positive,
            i.e. greater than zero.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/>
            is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.StrictlyPositive(System.String,System.TimeSpan)">
            <summary>
            Checks if the specified time span is strictly positive,
            i.e. greater than zero.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/>
            is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.ValidIds(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The <paramref name="ids"/> cannot be null, and every id must be strictly positive.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="ids">Ids to check.</param>
            <exception cref="T:System.ArgumentNullException">
            Collection cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An id is not strictly positive.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.GreaterThan(System.String,System.Int64,System.Int64)">
            <summary>
            Checks if the specified long is greater than a given minimum.
            Otherwise if the specified long is lower or equal to given minimum, fail.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <param name="minimum">The minimum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/> is
            smaller or equal to the <paramref name="minimum"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullOrEmptyCollection``1(System.String,``0)">
            <summary>
            Checks if the specified collection is null or empty.
            </summary>
            <typeparam name="T">Type of the collection.</typeparam>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="value"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/> is
            an empty collection.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullMaxOneId(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The <paramref name="ids"/> cannot be null.
            It can be empty, but it cannot contain more than 1 value.
            The value must be a strictly positive id, if it exists.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="ids">Collection to check.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullMaxItems``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Checks that the specified <paramref name="items"/> does not contain more than <paramref name="maxItems"/>.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="items">Collection to check.</param>
            <param name="maxItems">The maximum number of allowed items within the <paramref name="items"/> collection.</param>
            <typeparam name="T">The type parameter.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Checks if the specified <paramref name="value"/>
            is <see langword="null"/>, an empty string or white space string.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="value"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="value"/> is
            an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <paramref name="value"/> is
            whitespace string.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNull(System.String,System.Object)">
            <summary>
            Checks if the specified <paramref name="value"/> is <see langword="null"/>.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="value"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullOrInvariantCultureEach(System.String,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Checks if the specified culture is null or invariant culture.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="cultures">The cultures.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref>
                <name>culture</name>
            </paramref>
            is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <paramref>
                <name>culture</name>
            </paramref>
            is invariant culture.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullEach``1(System.String,``0)">
            <summary>
            Checks if the specified collection is null or contains null values.
            </summary>
            <typeparam name="T">Type of the collection.</typeparam>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="value"/>
            is <see langword="null"/> or contain null value.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullOrInvariantCulture(System.String,System.Globalization.CultureInfo)">
            <summary>
            Checks if the specified culture is null or invariant culture.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="culture">The culture.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="culture"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <paramref name="culture"/> is
            invariant culture.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.SdkGuard.NotNullOrWhiteSpaceEach(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if the specified collection is null or contains null
            or white space strings.
            </summary>
            <param name="argument">The name of the argument.</param>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="value"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <paramref name="value"/> is
            collection with null or white space strings.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityHelper.CastEntity``1(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Casts the entity to the specified type.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">Entity to cast.</param>
            <returns>
            Casted entity or <see langword="null"/> when the <paramref name="entity"/> was<see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When the entity is not of specified type.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityHelper.CastEntities``1(System.Collections.Generic.IEnumerable{Stylelabs.M.Sdk.Contracts.Base.IEntity})">
            <summary>
            Casts the entities to the specified type.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entities">Entities to cast.</param>
            <returns>
            Casted list of entities.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When an entity is not of specified type.
            </exception>
        </member>
        <member name="T:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper">
            <summary>
            Wrapper for property access to simplify usage via IL code.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper.#ctor(Stylelabs.M.Sdk.Contracts.Base.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper.GetPropertyValue``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="cultureInfo">The culture info.</param>
            <typeparam name="T">The type.</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper.SetPropertyValue(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:Stylelabs.M.Sdk.Utilities.TypedEntityWrapper.GetRelation``1(System.String)">
            <summary>
            Gets the specified relation.
            </summary>
            <param name="relationName">The name of the relation.</param>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <returns>The relation.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.Mappers.EntityLoadConfigurationMapper">
            <summary>
            Entity load configuration mapper.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.Mappers.EntityLoadConfigurationMapper.ToQueryLoadConfiguration(Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Maps an <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/> into a <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration"/>.
            </summary>
            <param name="configuration">The configuration to map.</param>
            <returns>The mapped configuration.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/> class.
            </summary>
            <param name="cultureOption">Culture load option.</param>
            <param name="propertyOption">Property load option.</param>
            <param name="relationOption">Relation load option.</param>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Minimal">
            <summary>
            Gets teh entity only with system entity properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Default">
            <summary>
            Gets the entity in the default culture, with all properties and no relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.DefaultCultureFull">
            <summary>
            Gets the entity in default culture, with all properties and all relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Full">
            <summary>
            Gets the entity in all installed cultures, with all properties and all relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.CultureLoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.PropertyLoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.RelationLoadOption">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.Builder">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration.DeepEquals(Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder">
            <summary>
            Default implementation of <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder"/> class. The builder will build a completely new <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.#ctor(Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder"/> class. The builder will extend or overwrite an existing <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/>.
            </summary>
            <param name="entityLoadConfiguration">The existing <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfiguration"/> to extend or overwrite.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.InCulture(System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.InCultures(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.InCultures(System.Globalization.CultureInfo[])">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.InCultures(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithProperties(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithProperties(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithProperties(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelation(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelations(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification})">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelations(Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification[])">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelations(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.EntityLoadConfigurationBuilder.WithRelations(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration">
            <summary>
            Represents a loading configuration for loading
            entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.CultureLoadOption">
            <summary>
            Gets or sets the culture load option.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.PropertyLoadOption">
            <summary>
            Gets or sets the property load option.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.RelationLoadOption">
            <summary>
            Gets or sets the relation load option.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.Builder">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder"/> from the current <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.
            The builder can extend or overwrite the configuration of the current <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.
            </summary>
            <returns>The entity load configuration builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.DeepClone">
            <summary>
            Creates a deep clone of this instance.
            </summary>
            <returns>The entity load configuration.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration.DeepEquals(Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration)">
            <summary>
            Checks if this instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other">The entity load configuration.</param>
            <returns><see langword="True"/> if the instances are equal; otherwise <see langword="False"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder">
            <summary>
            A builder for instances of <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.InCultures(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Indicates that entities should be loaded int the cultures specified by <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption"/>.
            </summary>
            <param name="loadOption">The load option.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.InCultures(System.Globalization.CultureInfo[])">
            <summary>
            Indicates that entities should be loaded in the specified <paramref name="cultures"/>.
            </summary>
            <param name="cultures">The cultures.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.InCultures(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Indicates that entities should be loaded in the specified <paramref name="cultures"/>.
            </summary>
            <param name="cultures">The cultures.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.InCulture(System.Globalization.CultureInfo)">
            <summary>
            Indicates that entities should be loaded in the specified <paramref name="culture"/>.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithProperties(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Indicates that entities should be loaded with the properties specified by <paramref name="loadOption"/>.
            </summary>
            <param name="loadOption">The load option.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithProperties(System.String[])">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="properties"/>.
            </summary>
            <param name="properties">The properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithProperties(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="properties"/>.
            </summary>
            <param name="properties">The properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithProperty(System.String)">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="property"/>.
            </summary>
            <param name="property">The property.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelations(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Indicates that entities should be loaded with the properties specified by <paramref name="loadOption"/>.
            </summary>
            <param name="loadOption">The load option.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelations(System.Collections.Generic.IEnumerable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification})">
            <summary>
            Indicates that entities should be loaded with the relations specified by <paramref name="specifications"/>.
            </summary>
            <param name="specifications">The specifications.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelations(Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification[])">
            <summary>
            Indicates that entities should be loaded with the relations specified by <paramref name="specifications"/>.
            </summary>
            <param name="specifications">The specifications.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelations(System.String[])">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="relations"/>.
            </summary>
            <param name="relations">The relations.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelations(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="relations"/>.
            </summary>
            <param name="relations">The relations.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelation(System.String)">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="relation"/>.
            </summary>
            <param name="relation">The relations.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.WithRelation(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Indicates that entities should be loaded with the specified <paramref name="relation"/> in the specified <paramref name="role"/>.
            </summary>
            <param name="relation">The relation.</param>
            <param name="role">The role.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfigurationBuilder.Build">
            <summary>
            Gets the resulting instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IEntityLoadConfiguration"/>.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration">
            <summary>
            Represents a loading configuration for querying
            ids or entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration.LoadEntities">
            <summary>
            Gets a value indicating whether entities or ids need to be returned.
            If <see langword="false"/>, no entities will be loaded, and the load options
            will be ignored.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration.CultureLoadOption">
            <summary>
            Gets the culture load option.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration.PropertyLoadOption">
            <summary>
            Gets the property load option.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration.RelationLoadOption">
            <summary>
            Gets the relation load option.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration"/> class.
            Loads no entities by default.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.#ctor(System.Boolean,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration"/> class.
            </summary>
            <param name="loadEntities">Load entities.</param>
            <param name="cultureOption">Culture load option.</param>
            <param name="propertyOption">Property load option.</param>
            <param name="relationOption">Relation load option.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration"/> class.
            Loads entities by default.
            </summary>
            <param name="cultureOption">Culture load option.</param>
            <param name="propertyOption">Property load option.</param>
            <param name="relationOption">Relation load option.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.#ctor(Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration"/> class.
            </summary>
            <param name="configuration">The load configuration.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Ids">
            <summary>
            Gets the query result will only contain ids.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Minimal">
            <summary>
            Gets only the base entity properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Default">
            <summary>
            Gets the query result entities in default culture, with all properties and no relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.DefaultCultureFull">
            <summary>
            Gets the query result entities in default culture, with all properties and all relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Full">
            <summary>
            Gets the query result entities in all installed cultures, with all properties and all relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.LoadEntities">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.CultureLoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.PropertyLoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.RelationLoadOption">
            <inheritdoc/>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption">
            <summary>
            Defines a culture load option.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            Defaults to <see>
                <cref>LoadOption.None</cref>
            </see>
            .
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            </summary>
            <param name="cultures">Cultures.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="cultures"/> contains invariant culture.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="cultures"/> is null or contains null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor(System.Globalization.CultureInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            </summary>
            <param name="cultures">Cultures.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="cultures"/> contains invariant culture.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            </summary>
            <param name="cultures">Cultures by locale identifier (LCID).</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="cultures"/> is null or contains null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            </summary>
            <param name="cultures">Cultures by locale identifier (LCID).</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption"/> class.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.None">
            <summary>
            Gets no cultures.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.Default">
            <summary>
            Gets the default culture in Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.All">
            <summary>
            Gets all cultures registered in Content Hub.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.LoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.Cultures">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.DebuggerDisplay">
            <summary>
            Gets a string to be displayed by the debugger.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.CultureLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption">
            <summary>
            Specifies which cultures to load.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption.Cultures">
            <summary>
            Gets or sets a list of cultures names that need to be loaded.
            This is only useful when <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption"/> is <see cref="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.Custom"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption.DeepClone">
            <summary>
            Creates a deep clone of this instance.
            </summary>
            <returns>The <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <summary>
            Checks if this instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other">Teh <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption"/>.</param>
            <returns><see langword="True"/> if the instances are equal; otherwise <see langword="False"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.ILoadOption">
            <summary>
            Specifies, in general, how to load something.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.ILoadOption.LoadOption">
            <summary>
            Gets or sets the load option.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption">
            <summary>
            Specifies which properties to load.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption.Properties">
            <summary>
            Gets or sets a list of property names (case insensitive) that need to be loaded.
            This is only useful when <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption"/> is <see cref="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.Custom"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption.DeepClone">
            <summary>
            Creates a deep clone of this instance.
            </summary>
            <returns>The property load option.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <summary>
            Checks if this instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other">The property load option.</param>
            <returns><see langword="True"/> if the instances are equal; otherwise <see langword="False"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption">
            <summary>
            Specifies which relations to load.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption.Relations">
            <summary>
            Gets or sets a list of relations that need to be loaded.
            This is only useful when <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption"/> is <see cref="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.Custom"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption.DeepClone">
            <summary>
            Creates a deep clone of this instance.
            </summary>
            <returns>The relation load option.</returns>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Checks if this instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other">The relation load option.</param>
            <returns><see langword="True"/> if the instances are equal; otherwise <see langword="False"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationSpecification">
            <summary>
            Specifies a relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationSpecification.Name">
            <summary>
            Gets name of the relation (case insensitive).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationSpecification.Role">
            <summary>
            Gets if the relation is self-referencing, which role to load.
            If it is <see langword="null"/>, both will be loaded into
            two separate relation objects.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.IRelationSpecification.DeepClone">
            <summary>
            Creates a deep clone of this instance.
            </summary>
            <returns>The relation specification.</returns>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption">
            <summary>
            An enum of possible load options.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption"/> class.
            Defaults to <see>
                <cref>LoadOption.None</cref>
            </see>
            .
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption"/> class.
            </summary>
            <param name="loadOption">A <see cref="P:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.LoadOption"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption"/> class.
            </summary>
            <param name="propertyNames">Property names.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="propertyNames"/> contains strings that are
            <see langword="null"/> or whitespace.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="propertyNames"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption"/> class.
            </summary>
            <param name="propertyNames">Property names.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="propertyNames"/> contains strings that are
            <see langword="null"/> or whitespace.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.None">
            <summary>
            Gets no properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.All">
            <summary>
            Gets all properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.LoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.Properties">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.PropertyLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            Defaults to <see>
                <cref>LoadOption.None</cref>
            </see>
            .
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.LoadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            </summary>
            <param name="loadOption">A <see cref="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.LoadOption"/>.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            </summary>
            <param name="relationNames">Relation names.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="relationNames"/> contains strings that are
            <see langword="null"/> or whitespace.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="relationNames"/> is null.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            </summary>
            <param name="relationNames">Relation names.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="relationNames"/> contains strings that are
            <see langword="null"/> or whitespace.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor(System.Collections.Generic.IEnumerable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            </summary>
            <param name="specs">Relation specifications.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="specs"/> is or contains
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption"/> class.
            </summary>
            <param name="specs">Relation specifications.</param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="specs"/> contains
            <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.None">
            <summary>
            Gets no relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.All">
            <summary>
            Gets all relations.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.LoadOption">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.Relations">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationLoadOption.DeepEquals(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole">
            <summary>
            Describes to role of a relation.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole.Parent">
            <summary>
            Parent.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole.Child">
            <summary>
            Child.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification">
            <inheritdoc/>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification"/> class.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.#ctor(System.String,System.Nullable{Stylelabs.M.Framework.Essentials.LoadOptions.RelationRole})">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification"/> class with a specified <paramref name="name"/> and optional <paramref name="role"/>.
            </summary>
            <param name="name">The relation name.</param>
            <param name="role">The relation role.</param>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.#ctor(Stylelabs.M.Framework.Essentials.LoadOptions.IRelationSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification"/> class.
            </summary>
            <param name="spec">Relation specification.</param>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.Name">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.Role">
            <inheritdoc/>
        </member>
        <member name="P:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.DebuggerDisplay">
            <summary>
            Gets returns a string to be displayed by the debugger.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Framework.Essentials.LoadOptions.RelationSpecification.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.EntityLoadOptions">
            <summary>
            Specifies if and how resulting entities should be loaded.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.EntityLoadOptions.LoadEntities">
            <summary>
            Gets or sets a value indicating whether the entities should be loaded.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.EntityLoadOptions.PropertiesToLoad">
             <summary>
             Gets or sets the names of the properties to load with the entities.
             If the value contains "*", all properties will be loaded.
             If the value is <see langword="null"/>, no properties will be loaded.
            
             The default value is "*", which mean all properties will be loaded.
             </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.EntityLoadOptions.RelationsToLoad">
             <summary>
             Gets or sets the names of the relations to load with the entities.
             If the value is <see langword="null"/>, no relations will be loaded.
            
             The default value is <see langword="null"/>, which mean no relations will be loaded.
             </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.EntityLoadOptions.CulturesToLoad">
             <summary>
             Gets or sets the cultures to load the entities in.
             If not specified, the entities will only be loaded in the invariant-culture.
            
             If the collection contains value "*", the entities will be loaded in all installed cultures.
             </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.EntityLoadOptions.ToQueryLoadConfiguration">
            <summary>
            Converts the load-options to an instance of <see cref="T:Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration"/>.
            </summary>
            <returns>The query load configuration.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.ComparisonOperator">
            <summary>
            Comparison operator.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Equals">
            <summary>
            Equals.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.NotEquals">
            <summary>
            Not Equals.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Gt">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Lt">
            <summary>
            Lower than.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Lte">
            <summary>
            Lower or equals to.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Gte">
            <summary>
            Greater or equals to.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Contains">
            <summary>
            Contains.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.StartsWith">
            <summary>
            Starts with.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.EndsWith">
            <summary>
            Ends with.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.CompositeFilterOperator">
            <summary>
            Composite filter operator.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.CompositeFilterOperator.And">
            <summary>
            And.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.CompositeFilterOperator.Or">
            <summary>
            Or.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter">
            <summary>
            Combines multiple queries using a specified operator (e.g. AND or OR).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter.CombineMethod">
            <summary>
            Gets or sets the operator used to combine the <see cref="P:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter.Children"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter.Children">
            <summary>
            Gets or sets the child-queries to combine. This property cannot be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.CreatedByQueryFilter">
            <summary>
            Filters on entities created by a specified user.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CreatedByQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.CreatedByQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter">
            <summary>
            Filters on entities with "created-on" date set to specified values.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the value(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter.Value">
            <summary>
            Gets or sets the value to compare with.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter">
            <summary>
            Filters on entities of specified definition(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the value(s). Must be either <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Equals"/> or <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.NotEquals"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Id">
            <summary>
            Gets or sets definition-id to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Ids">
            <summary>
            Gets or sets definition-ids to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Name">
            <summary>
            Gets or sets name of the definition to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Names">
            <summary>
            Gets or sets names of the definitions to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.FilterDataType">
            <summary>
            Filter data type.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.Int">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.Long">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.Float">
            <summary>
            Float.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.DateTime">
            <summary>
            Date time.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.DateTimeOffset">
            <summary>
            Date time offset.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterDataType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.FilterType">
            <summary>
            Filter types.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Composite">
            <summary>
            Composite.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Not">
            <summary>
            Not.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Property">
            <summary>
            Property.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Relation">
            <summary>
            Relation.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.CreatedBy">
            <summary>
            Created by.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.ModifiedBy">
            <summary>
            Modified by.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.SecuredAncestors">
            <summary>
            Secured ancestors.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Identifier">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Definition">
            <summary>
            Definition.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.Modules">
            <summary>
            Modules.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.CreatedOn">
            <summary>
            Created on.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.FilterType.ModifiedOn">
            <summary>
            Modified on.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter">
            <summary>
            Filters on entities of specified definition(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the identifier(s).
            Must be either <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Equals"/> or <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.NotEquals"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter.Value">
            <summary>
            Gets or sets the identifier to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter.Values">
            <summary>
            Gets or sets the identifiers to filter on.
            If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.IdQueryFilter">
            <summary>
            Filters on entities with specified id(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the id(s). Must be either <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Equals"/> or <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.NotEquals"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdQueryFilter.Value">
            <summary>
            Gets or sets the id to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.IdQueryFilter.Values">
            <summary>
            Gets or sets the ids to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IdQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.IFilterVisitor">
            <summary>
            Query filter can be visited by classes implementing this interface.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.RelationQueryFilter)">
            <summary>
            Visit relation filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.VisitAsync(Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter)">
            <summary>
            Visit property filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.CompositeQueryFilter)">
            <summary>
            Visit composite filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.NotQueryFilter)">
            <summary>
            Visit not filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.CreatedByQueryFilter)">
            <summary>
            Visit created by filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.ModifiedByQueryFilter)">
            <summary>
            Visit modified by filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter)">
            <summary>
            Visit secured ancestor filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.IdQueryFilter)">
            <summary>
            Visit id filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.IdentifierQueryFilter)">
            <summary>
            Visit identifier filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.DefinitionQueryFilter)">
            <summary>
            Visit definition filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.CreatedOnQueryFilter)">
            <summary>
            Visit created on filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter)">
            <summary>
            Visit modified on filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.IFilterVisitor.Visit(Stylelabs.M.Base.Querying.Filters.ModulesQueryFilter)">
            <summary>
            Visit modules filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.ModifiedByQueryFilter">
            <summary>
            Filters on entities last modified by a specified user.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModifiedByQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.ModifiedByQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter">
            <summary>
            Filters on entities with "modified-on" date set to specified values.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the value(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter.Value">
            <summary>
            Gets or sets the value to compare with.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.ModifiedOnQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.ModulesQueryFilter">
            <summary>
            Filters on entities that belong to one or more specified modules.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModulesQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.ModulesQueryFilter.Modules">
            <summary>
            Gets or sets modules to filter on.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.ModulesQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.NotQueryFilter">
            <summary>
            Inverts another query.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.NotQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.NotQueryFilter.Child">
            <summary>
            Gets or sets the query to invert. This property cannot be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.NotQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter">
            <summary>
            Filters on entities with a property set to value(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the property-value(s).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Property">
            <summary>
            Gets or sets the name of the property to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Culture">
            <summary>
            Gets or sets the culture to filter in, in case of multi-language properties.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.DataType">
            <summary>
            Gets or sets the data-type of the property.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Value">
            <summary>
            Gets or sets the value to compare with.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Values">
            <summary>
            Gets or sets the values to compare with. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilterConverter">
            <summary>
            Converts property values from json into appropriate objects, depending on their <see cref="T:Stylelabs.M.Base.Querying.Filters.FilterDataType"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilterConverter.CanWrite">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilterConverter.CanConvert(System.Type)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilterConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.PropertyQueryFilterConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.QueryFilter">
            <summary>
            Base class for query-filters.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.QueryFilter.Type">
            <summary>
            Gets the type of the filter.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.QueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <summary>
            Accepts a query visitor.
            </summary>
            <param name="visitor">The visitor to accept.</param>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.QueryFilterConverter">
            <summary>
            Handles the creation of instances of <see cref="T:Stylelabs.M.Base.Querying.Filters.QueryFilter"/> based on their type property.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.QueryFilterConverter.CanWrite">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.QueryFilterConverter.CanConvert(System.Type)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.QueryFilterConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.QueryFilterConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.RelationConnectionType">
            <summary>
            Relation connection type.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.RelationConnectionType.All">
            <summary>
            Both direct and indirect ancestors.
            e.g. asset -> product -> campaign: the ancestors of asset contain both products and campaigns.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.Filters.RelationConnectionType.Direct">
            <summary>
            Only direct ancestors.
            e.g. asset -> product -> campaign: the ancestors of asset are limited to products.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter">
            <summary>
            Filters on entities that have a relation to a specified entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter.Relation">
            <summary>
            Gets or sets the name of the relation.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter.ParentId">
            <summary>
            Gets or sets the parent-id to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter.ParentIds">
            <summary>
            Gets or sets the parent-ids to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.RelationQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter">
            <summary>
            Filters on entities that have one or more specified secured ancestors.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter.Type">
            <inheritdoc />
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter.ConnectionType">
            <summary>
            Gets or sets which ancestors to take into account (e.g. direct or direct+indirect).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter.Id">
            <summary>
            Gets or sets id of the ancestor to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter.Ids">
            <summary>
            Gets or sets ids of the ancestors to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Filters.SecuredAncestorsQueryFilter.Accept(Stylelabs.M.Base.Querying.Filters.IFilterVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Filters.UserQueryFilter">
            <summary>
            Base class for queries on user fields.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.UserQueryFilter.Operator">
            <summary>
            Gets or sets the operator used to compare the value(s). Must be either <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.Equals"/> or <see cref="F:Stylelabs.M.Base.Querying.Filters.ComparisonOperator.NotEquals"/>.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.UserQueryFilter.Id">
            <summary>
            Gets or sets id of the user to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.UserQueryFilter.Ids">
            <summary>
            Gets or sets ids of the users to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.UserQueryFilter.Username">
            <summary>
            Gets or sets the name of the user to filter on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Filters.UserQueryFilter.Usernames">
            <summary>
            Gets or sets the names of the users to filter on. If multiple values are specified, the filter will combine them using "OR" (essentially an IN-clause).
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.ExpressionArgumentGuard">
            <summary>
            Inspects the arguments of a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> and "guards" against invalid values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.ExpressionArgumentGuard.GuardArgNotNull(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>
            Ensures the argument at the specified <paramref name="position"/> is not <see langword="null"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="position">The position of the argument to inspect.</param>
            <exception cref="T:System.ArgumentNullException">The argument at the specified <paramref name="position"/> cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.ExpressionArgumentGuard.GuardArgNotNullOrEmpty(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>
            Ensures the argument at the specified <paramref name="position"/> is not <see langword="null"/> or an empty string.
            </summary>
            <param name="expression">The expression.</param>
            <param name="position">The position of the argument to inspect.</param>
            <exception cref="T:System.ArgumentNullException">The argument at the specified <paramref name="position"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The argument at the specified <paramref name="position"/> cannot be an empty string.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.ExpressionArgumentGuard.GuardArgNotNullOrEmptyCollection(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>
            Ensures the argument at the specified <paramref name="position"/> is not <see langword="null"/> or an empty collection.
            </summary>
            <param name="expression">The expression.</param>
            <param name="position">The position of the argument to inspect.</param>
            <exception cref="T:System.ArgumentNullException">The argument at the specified <paramref name="position"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The argument at the specified <paramref name="position"/> cannot be an empty collection.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.IQueryableEntity">
            <summary>
            Used in linq queries as query-source.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.Id">
            <summary>
            Gets the id of entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.Identifier">
            <summary>
            Gets the identifier of entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.DefinitionId">
            <summary>
            Gets the id of the associated definition of entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.DefinitionName">
            <summary>
            Gets the name of the associated definition of entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.CreatedById">
            <summary>
            Gets allows the id of the user who created an entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.CreatedByUsername">
            <summary>
            Gets the username of the user who created an entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.ModifiedById">
            <summary>
            Gets the id of the user who last modified an entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.ModifiedByUsername">
            <summary>
            Gets the username of the user who last modified an entity.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.CreatedOn">
            <summary>
            Gets the date an entity was created.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Linq.IQueryableEntity.ModifiedOn">
            <summary>
            Gets the date an entity was last modified.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableDateTime">
            <summary>
            Used by querying to compare datetime-values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Not equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Greater than operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Less than operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Greater or equals to operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableDateTime.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryableDateTime,System.DateTime)">
            <summary>
            Less or equals to operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1">
            <summary>
            Provides the main entry point to a LINQ query.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1"/> class.
            This constructor is called indirectly by LINQ's query methods, just pass to base.
            </summary>
            <param name="provider">The query provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1"/> class.
            Creates a new instance of <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableEntities`1"/>.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions">
            <summary>
            Extension methods for <see>
                <cref>QueryableEntity</cref>
            </see>
            .
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.Property(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,System.String)">
            <summary>
            Allows filtering and sorting on the values of the specified <paramref name="property"/>.
            </summary>
            <param name="entity">The entity.</param>
            <param name="property">The name of the property.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.Property(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,System.String,System.Globalization.CultureInfo)">
            <summary>
            Allows filtering and sorting on the values of the specified <paramref name="property"/> in the specified <paramref name="culture"/>.
            </summary>
            <param name="entity">The entity.</param>
            <param name="property">The name of the property.</param>
            <param name="culture">The culture used to access the values.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.Parent(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,System.String)">
            <summary>
            Allows filtering on the parent over the specified <paramref name="relation"/>.
            </summary>
            <param name="entity">The entity.</param>
            <param name="relation">The name of the relation.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.WithProperties(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,Stylelabs.M.Framework.Essentials.LoadOptions.IPropertyLoadOption)">
            <summary>
            Specifies the properties that need to be loaded with the entities.
            </summary>
            <param name="entity">The entity.</param>
            <param name="loadOption">The property load options.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.WithRelations(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,Stylelabs.M.Framework.Essentials.LoadOptions.IRelationLoadOption)">
            <summary>
            Specifies the relations that need to be loaded with the entities.
            </summary>
            <param name="entity">The entity.</param>
            <param name="loadOption">The relation load options.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.InCultures(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,Stylelabs.M.Framework.Essentials.LoadOptions.ICultureLoadOption)">
            <summary>
            Specifies the cultures in which the entities should be loaded.
            </summary>
            <param name="entity">The entity.</param>
            <param name="loadOption">The culture load options.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableEntityExtensions.LoadConfiguration(Stylelabs.M.Base.Querying.Linq.IQueryableEntity,Stylelabs.M.Framework.Essentials.LoadConfigurations.IQueryLoadConfiguration)">
            <summary>
            Specifies the configuration on how to load the entities.
            </summary>
            <param name="entity">The entity.</param>
            <param name="loadConfiguration">The load configuration.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableId">
            <summary>
            Used by querying to compare id-type values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableId.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryableId,System.Int64)">
            <summary>
            Equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableId.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryableId,System.Int64)">
            <summary>
            Not equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier">
            <summary>
            Used by querying to compare string-values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryableIdentifier,System.String)">
            <summary>
            Equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryableIdentifier,System.String)">
            <summary>
            Not equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifierExtensions">
            <summary>
            Extension method for <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdentifierExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableIdentifier,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier"/> should be at must one of the specified <paramref name="values"/>.
            Note that <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier"/> can be used for different types of filters (e.g. CreatedByUsername, DefinitionName, ...).
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is include in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdentifierExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableIdentifier,System.String[])">
            <summary>
            The <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier"/> should be at must one of the specified <paramref name="values"/>.
            Note that<see cref= "T:Stylelabs.M.Base.Querying.Linq.QueryableIdentifier" /> can be used for different types of filters (e.g.CreatedByUsername, DefinitionName, ...).
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is include in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableIdExtensions">
            <summary>
            Extension method for <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableId"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableId,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The id of an entity must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is include in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableIdExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableId,System.Int64[])">
            <summary>
            The id of an entity must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is include in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue">
            <summary>
            Used by querying to compare property values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Implicit(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue)~System.Boolean">
            <summary>
            Equals operator.
            </summary>
            <param name="obj">Operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.String)">
            <summary>
            Equals string operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.String)">
            <summary>
            Not equals string operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Equals integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Not equals integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Greater than integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Less than integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Greater or equals to integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int32)">
            <summary>
            Less or equals to integer operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Equals long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Not equals long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Greater than long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Less than long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Greater or equals to long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Int64)">
            <summary>
            Less or equals to long operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Equals decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Not equals decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Greater than decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Less than decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Greater or equals to decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Decimal)">
            <summary>
            Less or equals to decimal operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Equals float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Not equals float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Greater than float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Less than float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Greater or equals to float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Single)">
            <summary>
            Less or equals to float operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Equals datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Not equals datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Greater than datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Less than datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Greater or equals to datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTime)">
            <summary>
            Less or equals to datetime operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Equals datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Not equals datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Greater than datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThan(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Less than datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_GreaterThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Greater or equals to datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_LessThanOrEqual(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.DateTimeOffset)">
            <summary>
            Less or equals to datetime offset operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Boolean)">
            <summary>
            Equals boolean operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Boolean)">
            <summary>
            Not equals boolean operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions">
            <summary>
            Extension methods for <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            The value of the property must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The property.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.Object[])">
            <summary>
            The value of the property must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The property.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions.Contains(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.String)">
            <summary>
            The value of the (string) property must be contain the specified <paramref name="value"/>.
            </summary>
            <param name="queryablePropertyValue">The property.</param>
            <param name="value">The values to filter on.</param>
            <returns><see langword="true"/> if contains the value, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions.StartsWith(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.String)">
            <summary>
            The value of the (string) property must start with the specified <paramref name="value"/>.
            </summary>
            <param name="queryablePropertyValue">The property.</param>
            <param name="value">The values to filter on.</param>
            <returns><see langword="true"/> if starts with, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryablePropertyValueExtensions.EndsWith(Stylelabs.M.Base.Querying.Linq.QueryablePropertyValue,System.String)">
            <summary>
            The value of the (string) property must end with the specified <paramref name="value"/>.
            </summary>
            <param name="queryablePropertyValue">The property.</param>
            <param name="value">The values to filter on.</param>
            <returns><see langword="true"/> if ends with, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableRelationValue">
            <summary>
            Used by querying to compare relation values.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableRelationValue.op_Equality(Stylelabs.M.Base.Querying.Linq.QueryableRelationValue,System.Int64)">
            <summary>
            Equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableRelationValue.op_Inequality(Stylelabs.M.Base.Querying.Linq.QueryableRelationValue,System.Int64)">
            <summary>
            Not equals operator.
            </summary>
            <param name="obj1">Left operand.</param>
            <param name="obj2">Right operand.</param>
            <returns><see langword="true"/> if the operator evaluates to <see langword="true"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Operator not implemented.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryableRelationValueExtensions">
            <summary>
            Extension methods for <see cref="T:Stylelabs.M.Base.Querying.Linq.QueryableRelationValue"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableRelationValueExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableRelationValue,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The value of the relation must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is included in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryableRelationValueExtensions.In(Stylelabs.M.Base.Querying.Linq.QueryableRelationValue,System.Int64[])">
            <summary>
            The value of the relation must be at least one of the specified <paramref name="values"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to filter on.</param>
            <returns><see langword="true"/> if the value is included in the collection, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor">
            <summary>
            Visits a <see cref="T:Remotion.Linq.QueryModel"/> and converts it into a <see cref="P:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.Query"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.GetQuery(Remotion.Linq.QueryModel)">
            <summary>
            Converts the specified <paramref name="queryModel"/> into a <see cref="P:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.Query"/>.
            </summary>
            <param name="queryModel">The model to convert.</param>
            <returns>An executable <see cref="P:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.Query"/> created from the specified <paramref name="queryModel"/>.</returns>
            <exception cref="T:System.NotSupportedException">The specified query is not supported by the linq provider.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.GroupJoinClause)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitOrderings(System.Collections.ObjectModel.ObservableCollection{Remotion.Linq.Clauses.Ordering},Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.QueryModelVisitor.VisitResultOperators(System.Collections.ObjectModel.ObservableCollection{Remotion.Linq.Clauses.ResultOperatorBase},Remotion.Linq.QueryModel)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.TypeCache">
            <summary>
            Caches <see cref="T:System.Reflection.MethodInfo"/> and <see cref="T:System.Reflection.MemberInfo"/> used by various classes in the library.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.Expression"/>, taken from the where-clause of a linq query, into a <see cref="T:Stylelabs.M.Base.Querying.Filters.QueryFilter"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.CreateFilter(System.Linq.Expressions.Expression)">
            <summary>
            Converts the specified <paramref name="expression"/> into a <see cref="T:Stylelabs.M.Base.Querying.Filters.QueryFilter"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Filters.QueryFilter"/> containing the converted <paramref name="expression"/>.</returns>
            <exception cref="T:System.NotSupportedException">The specified <paramref name="expression"/> is not supported by the linq provider.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.CreateUnhandledItemException``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.QuerySourceReferenceFinder">
            <summary>
            Visits the elements of a <see cref="T:System.Linq.Expressions.Expression"/> until it finds a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.QuerySourceReferenceFinder.HasQuerySourceReference(System.Linq.Expressions.Expression)">
            <summary>
            Checks if the specified <paramref name="expression"/> contains a <see cref="T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression"/>.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns><see langword="true"/> if the query has source reference, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Linq.WhereExpressionTreeVisitor.QuerySourceReferenceFinder.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <inheritdoc />
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Query">
            <summary>
            Describes a query for entities.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.Filter">
            <summary>
            Gets or sets the filter for the query.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.Skip">
            <summary>
            Gets or sets the number of items to skip. If not specified, no items will be skipped.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.Take">
            <summary>
            Gets or sets the number of items to take. If not specified, the underlying implementation will use a default value.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.Sorting">
            <summary>
            Gets or sets how the results should be sorted.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.ScrollTime">
            <summary>
            Gets or sets if specified, the query will return as <see>
                <cref>QueryResult.ScrollId</cref>
            </see>
            , which can be used to walk through the set of results without having to use paging.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Query.EntityLoadOptions">
            <summary>
            Gets or sets if and how entities resulting entities should be loaded. By default, no entities will be loaded.
            </summary>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Query.CreateQuery(System.Func{Stylelabs.M.Base.Querying.Linq.QueryableEntities{Stylelabs.M.Base.Querying.Linq.IQueryableEntity},System.Linq.IQueryable{Stylelabs.M.Base.Querying.Linq.IQueryableEntity}})">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Base.Querying.Query"/> from a linq expression.
            If no loading configuration was specified, it will fall back to <see cref="P:Stylelabs.M.Framework.Essentials.LoadConfigurations.QueryLoadConfiguration.Ids"/>.
            </summary>
            <remarks>
            When using the SDK, this is the preferred way to create queries. The SDK will automatically set the correct loading configuration.
            </remarks>
            <param name="query">Creates the linq expression.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Query"/> created from the specified <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Argument <paramref name="query"/> cannot be null.</exception>
            <exception cref="T:System.NotSupportedException">The specified query is not supported by the linq provider.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Query.CreateEntitiesQuery(System.Func{Stylelabs.M.Base.Querying.Linq.QueryableEntities{Stylelabs.M.Base.Querying.Linq.IQueryableEntity},System.Linq.IQueryable{Stylelabs.M.Base.Querying.Linq.IQueryableEntity}})">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Base.Querying.Query"/> from a linq expression.
            The query has <see>
                <cref>Query.EntityLoadOptions.LoadEntities</cref>
            </see>
            set to <c>True</c>, loading the resulting entities.
            </summary>
            <param name="query">Creates the linq expression.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Query"/> created from the specified <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Argument <paramref name="query"/> cannot be null.</exception>
            <exception cref="T:System.NotSupportedException">The specified query is not supported by the linq provider.</exception>
        </member>
        <member name="M:Stylelabs.M.Base.Querying.Query.CreateIdsQuery(System.Func{Stylelabs.M.Base.Querying.Linq.QueryableEntities{Stylelabs.M.Base.Querying.Linq.IQueryableEntity},System.Linq.IQueryable{Stylelabs.M.Base.Querying.Linq.IQueryableEntity}})">
            <summary>
            Creates a <see cref="T:Stylelabs.M.Base.Querying.Query"/> from a linq expression.
            Only returns the ids of the resulting entities.
            </summary>
            <param name="query">Creates the linq expression.</param>
            <returns>A <see cref="T:Stylelabs.M.Base.Querying.Query"/> created from the specified <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Argument <paramref name="query"/> cannot be null.</exception>
            <exception cref="T:System.NotSupportedException">The specified query is not supported by the linq provider.</exception>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.QueryLoadingResource">
            <summary>
            Defines a query loading resource.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.QueryLoadingResource.LoadConfiguration">
            <summary>
            Gets or sets indicates if and how entities resulting entities should be loaded. By default, no entities will be loaded, only ids.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.QueryRequest">
            <summary>
            Request for executing V3 queries, using Base.Querying.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.QueryRequest.Query">
            <summary>
            Gets or sets the query to execute.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.ScrollRequest">
            <summary>
            Defines a scroll request.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.ScrollRequest.ScrollId">
            <summary>
            Gets or sets the id of the scroll session to get the next results for.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.ScrollRequest.ScrollTime">
            <summary>
            Gets or sets the time to keep the scroll session alive.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.ScrollRequest.EntityLoadOptions">
            <summary>
            Gets or sets indicates if and how entities resulting entities should be loaded. By default, no entities will be loaded.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.QuerySortOrder">
            <summary>
            Query sort order.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.QuerySortOrder.Desc">
            <summary>
            Descendant.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.QuerySortOrder.Asc">
            <summary>
            Ascendant.
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.SortFieldType">
            <summary>
            Sort field type.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.SortFieldType.Property">
            <summary>
            The field is a property.
            </summary>
        </member>
        <member name="F:Stylelabs.M.Base.Querying.SortFieldType.System">
            <summary>
            It's a system field (e.g. CreatedOn, CreatedBy, DefinitionName...).
            </summary>
        </member>
        <member name="T:Stylelabs.M.Base.Querying.Sorting">
            <summary>
            Indicates how to sort the result of a query.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Sorting.FieldType">
            <summary>
            Gets or sets the type of the field to sort on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Sorting.Field">
            <summary>
            Gets or sets the field to sort on.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Sorting.Culture">
            <summary>
            Gets or sets the culture to sort in.
            </summary>
        </member>
        <member name="P:Stylelabs.M.Base.Querying.Sorting.Order">
            <summary>
            Gets or sets the direction to sort in.
            </summary>
        </member>
    </members>
</doc>
